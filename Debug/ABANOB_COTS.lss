
ABANOB_COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003a18  00003aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800094  00800094  00003ae0  2**0
                  ALLOC
  3 .stab         00004254  00000000  00000000  00003ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a57  00000000  00000000  00007d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000978b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000098cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d709  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ded7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_1>
       8:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__vector_2>
       c:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__vector_3>
      10:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_4>
      14:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_5>
      18:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_6>
      1c:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__vector_7>
      20:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_8>
      24:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__vector_9>
      28:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__vector_10>
      2c:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <main>
      8a:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidSleep>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_register.h"


void WDT_voidSleep(u8 Copy_u8SleepTime){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	//clear pre scaler bits
	WDTCR&= PRESCALER_MASK;
     b52:	a1 e4       	ldi	r26, 0x41	; 65
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e1 e4       	ldi	r30, 0x41	; 65
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	88 7f       	andi	r24, 0xF8	; 248
     b5e:	8c 93       	st	X, r24
	//set required prescaler
	WDTCR|=Copy_u8SleepTime;
     b60:	a1 e4       	ldi	r26, 0x41	; 65
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e1 e4       	ldi	r30, 0x41	; 65
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	90 81       	ld	r25, Z
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	89 2b       	or	r24, r25
     b6e:	8c 93       	st	X, r24
}
     b70:	0f 90       	pop	r0
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <WDT_voidEnable>:
void WDT_voidEnable(void){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
     b80:	a1 e4       	ldi	r26, 0x41	; 65
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e1 e4       	ldi	r30, 0x41	; 65
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	8c 93       	st	X, r24
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <WDT_voidDisable>:
void WDT_voidDisable(void){
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	WDTCR|=DISABLE_MASK;
     b9c:	a1 e4       	ldi	r26, 0x41	; 65
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e1 e4       	ldi	r30, 0x41	; 65
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	88 61       	ori	r24, 0x18	; 24
     ba8:	8c 93       	st	X, r24

	WDTCR=DISABLE;
     baa:	e1 e4       	ldi	r30, 0x41	; 65
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	10 82       	st	Z, r1
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <TIMER2_voidScheduleFunc>:
static void (*TIMER2_pvScheduleFunc)(void)=NULL;
static u32 TIMER_u32ScheduleCompMatchCount;
static u8 TIMER_u8ScheduleRepeatability;


static void TIMER2_voidScheduleFunc(void){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter=0;
	Local_u32Counter++;
     bbe:	80 91 a6 00 	lds	r24, 0x00A6
     bc2:	90 91 a7 00 	lds	r25, 0x00A7
     bc6:	a0 91 a8 00 	lds	r26, 0x00A8
     bca:	b0 91 a9 00 	lds	r27, 0x00A9
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 a6 00 	sts	0x00A6, r24
     bd8:	90 93 a7 00 	sts	0x00A7, r25
     bdc:	a0 93 a8 00 	sts	0x00A8, r26
     be0:	b0 93 a9 00 	sts	0x00A9, r27
	if(Local_u32Counter==TIMER_u32ScheduleCompMatchCount){
     be4:	20 91 a6 00 	lds	r18, 0x00A6
     be8:	30 91 a7 00 	lds	r19, 0x00A7
     bec:	40 91 a8 00 	lds	r20, 0x00A8
     bf0:	50 91 a9 00 	lds	r21, 0x00A9
     bf4:	80 91 aa 00 	lds	r24, 0x00AA
     bf8:	90 91 ab 00 	lds	r25, 0x00AB
     bfc:	a0 91 ac 00 	lds	r26, 0x00AC
     c00:	b0 91 ad 00 	lds	r27, 0x00AD
     c04:	28 17       	cp	r18, r24
     c06:	39 07       	cpc	r19, r25
     c08:	4a 07       	cpc	r20, r26
     c0a:	5b 07       	cpc	r21, r27
     c0c:	f1 f4       	brne	.+60     	; 0xc4a <TIMER2_voidScheduleFunc+0x94>
		TIMER2_pvScheduleFunc();
     c0e:	e0 91 a4 00 	lds	r30, 0x00A4
     c12:	f0 91 a5 00 	lds	r31, 0x00A5
     c16:	09 95       	icall
		Local_u32Counter=0;
     c18:	10 92 a6 00 	sts	0x00A6, r1
     c1c:	10 92 a7 00 	sts	0x00A7, r1
     c20:	10 92 a8 00 	sts	0x00A8, r1
     c24:	10 92 a9 00 	sts	0x00A9, r1
		if(TIMER_u8ScheduleRepeatability==REPEAT_ONCE){
     c28:	80 91 ae 00 	lds	r24, 0x00AE
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	29 f4       	brne	.+10     	; 0xc3a <TIMER2_voidScheduleFunc+0x84>
			TIMER_u8SetIntStatus(INT_TIMER2_COMP,INT_DISABLE);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	0e 94 18 07 	call	0xe30	; 0xe30 <TIMER_u8SetIntStatus>
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <TIMER2_voidScheduleFunc+0x94>
		}
		else if(TIMER_u8ScheduleRepeatability==REPEAT_PERIODIC){
     c3a:	80 91 ae 00 	lds	r24, 0x00AE
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	21 f4       	brne	.+8      	; 0xc4a <TIMER2_voidScheduleFunc+0x94>
			TIMER_u8SetIntStatus(INT_TIMER2_COMP,INT_ENABLE);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	0e 94 18 07 	call	0xe30	; 0xe30 <TIMER_u8SetIntStatus>
		}
	}
}
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <TIMER_u8SetTimerVal>:

/********************************************************GENERAL TIMER FUNCTIONS*****************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetTimerVal(u8 Copy_u8TimerID,u16 Copy_u16Value){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <TIMER_u8SetTimerVal+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <TIMER_u8SetTimerVal+0x8>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <TIMER_u8SetTimerVal+0xa>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	7c 83       	std	Y+4, r23	; 0x04
     c62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TimerID){
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	2d 83       	std	Y+5, r18	; 0x05
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	b1 f0       	breq	.+44     	; 0xca8 <TIMER_u8SetTimerVal+0x58>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	24 30       	cpi	r18, 0x04	; 4
     c82:	31 05       	cpc	r19, r1
     c84:	c1 f0       	breq	.+48     	; 0xcb6 <TIMER_u8SetTimerVal+0x66>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	09 f5       	brne	.+66     	; 0xcd0 <TIMER_u8SetTimerVal+0x80>
	case TIMER0 : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOT_OK;} break;
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	8f 3f       	cpi	r24, 0xFF	; 255
     c94:	91 05       	cpc	r25, r1
     c96:	09 f0       	breq	.+2      	; 0xc9a <TIMER_u8SetTimerVal+0x4a>
     c98:	28 f4       	brcc	.+10     	; 0xca4 <TIMER_u8SetTimerVal+0x54>
     c9a:	e2 e5       	ldi	r30, 0x52	; 82
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	17 c0       	rjmp	.+46     	; 0xcd2 <TIMER_u8SetTimerVal+0x82>
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	15 c0       	rjmp	.+42     	; 0xcd2 <TIMER_u8SetTimerVal+0x82>
	case TIMER1 : TCNT1 = Copy_u16Value; break;
     ca8:	ec e4       	ldi	r30, 0x4C	; 76
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	80 83       	st	Z, r24
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <TIMER_u8SetTimerVal+0x82>
	case TIMER2 : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOT_OK;} break;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	8f 3f       	cpi	r24, 0xFF	; 255
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <TIMER_u8SetTimerVal+0x72>
     cc0:	28 f4       	brcc	.+10     	; 0xccc <TIMER_u8SetTimerVal+0x7c>
     cc2:	e4 e4       	ldi	r30, 0x44	; 68
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	80 83       	st	Z, r24
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <TIMER_u8SetTimerVal+0x82>
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <TIMER_u8SetTimerVal+0x82>
	default: Local_u8ErrorState=NOT_OK;
     cd0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd4:	26 96       	adiw	r28, 0x06	; 6
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <TIMER_u8GetTimerVal>:


u8 TIMER_u8GetTimerVal(u8 Copy_u8TimerID,u16* Copy_pu16Value){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <TIMER_u8GetTimerVal+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <TIMER_u8GetTimerVal+0x8>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <TIMER_u8GetTimerVal+0xa>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	7c 83       	std	Y+4, r23	; 0x04
     cf8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TimerID){
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	3e 83       	std	Y+6, r19	; 0x06
     d06:	2d 83       	std	Y+5, r18	; 0x05
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	91 05       	cpc	r25, r1
     d10:	99 f0       	breq	.+38     	; 0xd38 <TIMER_u8GetTimerVal+0x52>
     d12:	2d 81       	ldd	r18, Y+5	; 0x05
     d14:	3e 81       	ldd	r19, Y+6	; 0x06
     d16:	24 30       	cpi	r18, 0x04	; 4
     d18:	31 05       	cpc	r19, r1
     d1a:	b9 f0       	breq	.+46     	; 0xd4a <TIMER_u8GetTimerVal+0x64>
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	e9 f4       	brne	.+58     	; 0xd5e <TIMER_u8GetTimerVal+0x78>
	case TIMER0 : *Copy_pu16Value = TCNT0 ; break;
     d24:	e2 e5       	ldi	r30, 0x52	; 82
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	eb 81       	ldd	r30, Y+3	; 0x03
     d30:	fc 81       	ldd	r31, Y+4	; 0x04
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <TIMER_u8GetTimerVal+0x7a>
	case TIMER1 : *Copy_pu16Value = TCNT1 ; break;
     d38:	ec e4       	ldi	r30, 0x4C	; 76
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <TIMER_u8GetTimerVal+0x7a>
	case TIMER2 : *Copy_pu16Value = TCNT2 ; break;
     d4a:	e4 e4       	ldi	r30, 0x44	; 68
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	eb 81       	ldd	r30, Y+3	; 0x03
     d56:	fc 81       	ldd	r31, Y+4	; 0x04
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <TIMER_u8GetTimerVal+0x7a>
	default: Local_u8ErrorState=NOT_OK;
     d5e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}
     d62:	26 96       	adiw	r28, 0x06	; 6
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER_u8SetCompMatch>:


u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <TIMER_u8SetCompMatch+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <TIMER_u8SetCompMatch+0x8>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <TIMER_u8SetCompMatch+0xa>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	7c 83       	std	Y+4, r23	; 0x04
     d86:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TimerID){
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3e 83       	std	Y+6, r19	; 0x06
     d94:	2d 83       	std	Y+5, r18	; 0x05
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	11 f1       	breq	.+68     	; 0xde4 <TIMER_u8SetCompMatch+0x70>
     da0:	2d 81       	ldd	r18, Y+5	; 0x05
     da2:	3e 81       	ldd	r19, Y+6	; 0x06
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	2c f4       	brge	.+10     	; 0xdb4 <TIMER_u8SetCompMatch+0x40>
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	61 f0       	breq	.+24     	; 0xdca <TIMER_u8SetCompMatch+0x56>
     db2:	33 c0       	rjmp	.+102    	; 0xe1a <TIMER_u8SetCompMatch+0xa6>
     db4:	2d 81       	ldd	r18, Y+5	; 0x05
     db6:	3e 81       	ldd	r19, Y+6	; 0x06
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	d1 f0       	breq	.+52     	; 0xdf2 <TIMER_u8SetCompMatch+0x7e>
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	84 30       	cpi	r24, 0x04	; 4
     dc4:	91 05       	cpc	r25, r1
     dc6:	e1 f0       	breq	.+56     	; 0xe00 <TIMER_u8SetCompMatch+0x8c>
     dc8:	28 c0       	rjmp	.+80     	; 0xe1a <TIMER_u8SetCompMatch+0xa6>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOT_OK;} break;
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <TIMER_u8SetCompMatch+0x62>
     dd4:	28 f4       	brcc	.+10     	; 0xde0 <TIMER_u8SetCompMatch+0x6c>
     dd6:	ec e5       	ldi	r30, 0x5C	; 92
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	80 83       	st	Z, r24
     dde:	1e c0       	rjmp	.+60     	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
     de0:	19 82       	std	Y+1, r1	; 0x01
     de2:	1c c0       	rjmp	.+56     	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
	case TIMER1A : OCR1A = Copy_u16Value; break;
     de4:	ea e4       	ldi	r30, 0x4A	; 74
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
     df0:	15 c0       	rjmp	.+42     	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
	case TIMER1B : OCR1B = Copy_u16Value; break;
     df2:	e8 e4       	ldi	r30, 0x48	; 72
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOT_OK;} break;
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	8f 3f       	cpi	r24, 0xFF	; 255
     e06:	91 05       	cpc	r25, r1
     e08:	09 f0       	breq	.+2      	; 0xe0c <TIMER_u8SetCompMatch+0x98>
     e0a:	28 f4       	brcc	.+10     	; 0xe16 <TIMER_u8SetCompMatch+0xa2>
     e0c:	e3 e4       	ldi	r30, 0x43	; 67
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	80 83       	st	Z, r24
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <TIMER_u8SetCompMatch+0xa8>
	default: Local_u8ErrorState=NOT_OK;
     e1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	26 96       	adiw	r28, 0x06	; 6
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <TIMER_u8SetIntStatus>:


u8 TIMER_u8SetIntStatus(u8 Copy_u8InterruptID, u8 Copy_u8Status){
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	27 97       	sbiw	r28, 0x07	; 7
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	8a 83       	std	Y+2, r24	; 0x02
     e46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01


	if(Copy_u8Status==INT_ENABLE){
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	09 f0       	breq	.+2      	; 0xe54 <TIMER_u8SetIntStatus+0x24>
     e52:	76 c0       	rjmp	.+236    	; 0xf40 <TIMER_u8SetIntStatus+0x110>
		switch(Copy_u8InterruptID){
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3f 83       	std	Y+7, r19	; 0x07
     e5c:	2e 83       	std	Y+6, r18	; 0x06
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	9f 81       	ldd	r25, Y+7	; 0x07
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	91 05       	cpc	r25, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <TIMER_u8SetIntStatus+0x3a>
     e68:	41 c0       	rjmp	.+130    	; 0xeec <TIMER_u8SetIntStatus+0xbc>
     e6a:	2e 81       	ldd	r18, Y+6	; 0x06
     e6c:	3f 81       	ldd	r19, Y+7	; 0x07
     e6e:	24 30       	cpi	r18, 0x04	; 4
     e70:	31 05       	cpc	r19, r1
     e72:	7c f4       	brge	.+30     	; 0xe92 <TIMER_u8SetIntStatus+0x62>
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	39 f1       	breq	.+78     	; 0xecc <TIMER_u8SetIntStatus+0x9c>
     e7e:	2e 81       	ldd	r18, Y+6	; 0x06
     e80:	3f 81       	ldd	r19, Y+7	; 0x07
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	d4 f5       	brge	.+116    	; 0xefc <TIMER_u8SetIntStatus+0xcc>
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	9f 81       	ldd	r25, Y+7	; 0x07
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	b1 f0       	breq	.+44     	; 0xebc <TIMER_u8SetIntStatus+0x8c>
     e90:	55 c0       	rjmp	.+170    	; 0xf3c <TIMER_u8SetIntStatus+0x10c>
     e92:	2e 81       	ldd	r18, Y+6	; 0x06
     e94:	3f 81       	ldd	r19, Y+7	; 0x07
     e96:	25 30       	cpi	r18, 0x05	; 5
     e98:	31 05       	cpc	r19, r1
     e9a:	c1 f1       	breq	.+112    	; 0xf0c <TIMER_u8SetIntStatus+0xdc>
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	85 30       	cpi	r24, 0x05	; 5
     ea2:	91 05       	cpc	r25, r1
     ea4:	dc f0       	brlt	.+54     	; 0xedc <TIMER_u8SetIntStatus+0xac>
     ea6:	2e 81       	ldd	r18, Y+6	; 0x06
     ea8:	3f 81       	ldd	r19, Y+7	; 0x07
     eaa:	26 30       	cpi	r18, 0x06	; 6
     eac:	31 05       	cpc	r19, r1
     eae:	b1 f1       	breq	.+108    	; 0xf1c <TIMER_u8SetIntStatus+0xec>
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	87 30       	cpi	r24, 0x07	; 7
     eb6:	91 05       	cpc	r25, r1
     eb8:	c9 f1       	breq	.+114    	; 0xf2c <TIMER_u8SetIntStatus+0xfc>
     eba:	40 c0       	rjmp	.+128    	; 0xf3c <TIMER_u8SetIntStatus+0x10c>
		case  INT_TIMER2_COMP	: SET_BIT(TIMSK,TIMSK_OCIE2 );break;
     ebc:	a9 e5       	ldi	r26, 0x59	; 89
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e9 e5       	ldi	r30, 0x59	; 89
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
     eca:	b5 c0       	rjmp	.+362    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER2_OVF	: SET_BIT(TIMSK,TIMSK_TOIE2 );break;
     ecc:	a9 e5       	ldi	r26, 0x59	; 89
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e9 e5       	ldi	r30, 0x59	; 89
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	8c 93       	st	X, r24
     eda:	ad c0       	rjmp	.+346    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1_CAPT	: SET_BIT(TIMSK,TIMSK_TICIE1);break;
     edc:	a9 e5       	ldi	r26, 0x59	; 89
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e9 e5       	ldi	r30, 0x59	; 89
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 62       	ori	r24, 0x20	; 32
     ee8:	8c 93       	st	X, r24
     eea:	a5 c0       	rjmp	.+330    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1A_COMP	: SET_BIT(TIMSK,TIMSK_OCIE1A);break;
     eec:	a9 e5       	ldi	r26, 0x59	; 89
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e9 e5       	ldi	r30, 0x59	; 89
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 61       	ori	r24, 0x10	; 16
     ef8:	8c 93       	st	X, r24
     efa:	9d c0       	rjmp	.+314    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1B_COMP  : SET_BIT(TIMSK,TIMSK_OCIE1B);break;
     efc:	a9 e5       	ldi	r26, 0x59	; 89
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e9 e5       	ldi	r30, 0x59	; 89
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 60       	ori	r24, 0x08	; 8
     f08:	8c 93       	st	X, r24
     f0a:	95 c0       	rjmp	.+298    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1_OVF 	: SET_BIT(TIMSK,TIMSK_TOIE1 );break;
     f0c:	a9 e5       	ldi	r26, 0x59	; 89
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e9 e5       	ldi	r30, 0x59	; 89
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	84 60       	ori	r24, 0x04	; 4
     f18:	8c 93       	st	X, r24
     f1a:	8d c0       	rjmp	.+282    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER0_COMP	: SET_BIT(TIMSK,TIMSK_OCIE0 );break;
     f1c:	a9 e5       	ldi	r26, 0x59	; 89
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e9 e5       	ldi	r30, 0x59	; 89
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	8c 93       	st	X, r24
     f2a:	85 c0       	rjmp	.+266    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER0_OVF	: SET_BIT(TIMSK,TIMSK_TOIE0 );break;
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	8c 93       	st	X, r24
     f3a:	7d c0       	rjmp	.+250    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		default : Local_u8ErrorState=NOT_OK;
     f3c:	19 82       	std	Y+1, r1	; 0x01
     f3e:	7b c0       	rjmp	.+246    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		}
	}
	else if(Copy_u8Status==INT_DISABLE){
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	09 f0       	breq	.+2      	; 0xf48 <TIMER_u8SetIntStatus+0x118>
     f46:	76 c0       	rjmp	.+236    	; 0x1034 <TIMER_u8SetIntStatus+0x204>
		switch(Copy_u8InterruptID){
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	91 05       	cpc	r25, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <TIMER_u8SetIntStatus+0x12e>
     f5c:	41 c0       	rjmp	.+130    	; 0xfe0 <TIMER_u8SetIntStatus+0x1b0>
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	24 30       	cpi	r18, 0x04	; 4
     f64:	31 05       	cpc	r19, r1
     f66:	7c f4       	brge	.+30     	; 0xf86 <TIMER_u8SetIntStatus+0x156>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	39 f1       	breq	.+78     	; 0xfc0 <TIMER_u8SetIntStatus+0x190>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	d4 f5       	brge	.+116    	; 0xff0 <TIMER_u8SetIntStatus+0x1c0>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	b1 f0       	breq	.+44     	; 0xfb0 <TIMER_u8SetIntStatus+0x180>
     f84:	55 c0       	rjmp	.+170    	; 0x1030 <TIMER_u8SetIntStatus+0x200>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	25 30       	cpi	r18, 0x05	; 5
     f8c:	31 05       	cpc	r19, r1
     f8e:	c1 f1       	breq	.+112    	; 0x1000 <TIMER_u8SetIntStatus+0x1d0>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	91 05       	cpc	r25, r1
     f98:	dc f0       	brlt	.+54     	; 0xfd0 <TIMER_u8SetIntStatus+0x1a0>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	26 30       	cpi	r18, 0x06	; 6
     fa0:	31 05       	cpc	r19, r1
     fa2:	b1 f1       	breq	.+108    	; 0x1010 <TIMER_u8SetIntStatus+0x1e0>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	87 30       	cpi	r24, 0x07	; 7
     faa:	91 05       	cpc	r25, r1
     fac:	c9 f1       	breq	.+114    	; 0x1020 <TIMER_u8SetIntStatus+0x1f0>
     fae:	40 c0       	rjmp	.+128    	; 0x1030 <TIMER_u8SetIntStatus+0x200>
		case  INT_TIMER2_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE2 );break;
     fb0:	a9 e5       	ldi	r26, 0x59	; 89
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e9 e5       	ldi	r30, 0x59	; 89
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	8c 93       	st	X, r24
     fbe:	3b c0       	rjmp	.+118    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER2_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE2 );break;
     fc0:	a9 e5       	ldi	r26, 0x59	; 89
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e9 e5       	ldi	r30, 0x59	; 89
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	8c 93       	st	X, r24
     fce:	33 c0       	rjmp	.+102    	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1_CAPT	: CLR_BIT(TIMSK,TIMSK_TICIE1);break;
     fd0:	a9 e5       	ldi	r26, 0x59	; 89
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e9 e5       	ldi	r30, 0x59	; 89
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	8c 93       	st	X, r24
     fde:	2b c0       	rjmp	.+86     	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1A_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE1A);break;
     fe0:	a9 e5       	ldi	r26, 0x59	; 89
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e9 e5       	ldi	r30, 0x59	; 89
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	8c 93       	st	X, r24
     fee:	23 c0       	rjmp	.+70     	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1B_COMP  : CLR_BIT(TIMSK,TIMSK_OCIE1B);break;
     ff0:	a9 e5       	ldi	r26, 0x59	; 89
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e9 e5       	ldi	r30, 0x59	; 89
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	87 7f       	andi	r24, 0xF7	; 247
     ffc:	8c 93       	st	X, r24
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER1_OVF 	: CLR_BIT(TIMSK,TIMSK_TOIE1 );break;
    1000:	a9 e5       	ldi	r26, 0x59	; 89
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e9 e5       	ldi	r30, 0x59	; 89
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24
    100e:	13 c0       	rjmp	.+38     	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER0_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE0 );break;
    1010:	a9 e5       	ldi	r26, 0x59	; 89
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e9 e5       	ldi	r30, 0x59	; 89
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8d 7f       	andi	r24, 0xFD	; 253
    101c:	8c 93       	st	X, r24
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		case  INT_TIMER0_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE0 );break;
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		default : Local_u8ErrorState=NOT_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <TIMER_u8SetIntStatus+0x206>
		}
	}
	else{
		Local_u8ErrorState=NOT_OK;
    1034:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
}
    1038:	27 96       	adiw	r28, 0x07	; 7
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <TIMER0_u8Init+0x6>
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	89 83       	std	Y+1, r24	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	09 f4       	brne	.+2      	; 0x1068 <TIMER0_u8Init+0x1e>
    1066:	b3 c0       	rjmp	.+358    	; 0x11ce <TIMER0_u8Init+0x184>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	80 81       	ld	r24, Z
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	79 f4       	brne	.+30     	; 0x1090 <TIMER0_u8Init+0x46>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7b       	andi	r24, 0xBF	; 191
    108c:	8c 93       	st	X, r24
    108e:	3d c0       	rjmp	.+122    	; 0x110a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1090:	ea 81       	ldd	r30, Y+2	; 0x02
    1092:	fb 81       	ldd	r31, Y+3	; 0x03
    1094:	80 81       	ld	r24, Z
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	79 f4       	brne	.+30     	; 0x10b8 <TIMER0_u8Init+0x6e>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    10a8:	a3 e5       	ldi	r26, 0x53	; 83
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e3 e5       	ldi	r30, 0x53	; 83
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
    10b6:	29 c0       	rjmp	.+82     	; 0x110a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    10b8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ba:	fb 81       	ldd	r31, Y+3	; 0x03
    10bc:	80 81       	ld	r24, Z
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	79 f4       	brne	.+30     	; 0x10e0 <TIMER0_u8Init+0x96>
			SET_BIT(TCCR0,TCCR0_WGM01);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 60       	ori	r24, 0x08	; 8
    10ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    10d0:	a3 e5       	ldi	r26, 0x53	; 83
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e3 e5       	ldi	r30, 0x53	; 83
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7b       	andi	r24, 0xBF	; 191
    10dc:	8c 93       	st	X, r24
    10de:	15 c0       	rjmp	.+42     	; 0x110a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    10e0:	ea 81       	ldd	r30, Y+2	; 0x02
    10e2:	fb 81       	ldd	r31, Y+3	; 0x03
    10e4:	80 81       	ld	r24, Z
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	79 f4       	brne	.+30     	; 0x1108 <TIMER0_u8Init+0xbe>
			SET_BIT(TCCR0,TCCR0_WGM01);
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 60       	ori	r24, 0x08	; 8
    10f6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	8c 93       	st	X, r24
    1106:	01 c0       	rjmp	.+2      	; 0x110a <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1108:	19 82       	std	Y+1, r1	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
    110a:	a3 e5       	ldi	r26, 0x53	; 83
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e3 e5       	ldi	r30, 0x53	; 83
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7c       	andi	r24, 0xCF	; 207
    1116:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    1118:	a3 e5       	ldi	r26, 0x53	; 83
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e3 e5       	ldi	r30, 0x53	; 83
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	ea 81       	ldd	r30, Y+2	; 0x02
    1126:	fb 81       	ldd	r31, Y+3	; 0x03
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	82 95       	swap	r24
    1130:	92 95       	swap	r25
    1132:	90 7f       	andi	r25, 0xF0	; 240
    1134:	98 27       	eor	r25, r24
    1136:	80 7f       	andi	r24, 0xF0	; 240
    1138:	98 27       	eor	r25, r24
    113a:	82 2b       	or	r24, r18
    113c:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    113e:	ea 81       	ldd	r30, Y+2	; 0x02
    1140:	fb 81       	ldd	r31, Y+3	; 0x03
    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	41 f4       	brne	.+16     	; 0x1158 <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
    1148:	a9 e5       	ldi	r26, 0x59	; 89
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e9 e5       	ldi	r30, 0x59	; 89
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	82 60       	ori	r24, 0x02	; 2
    1154:	8c 93       	st	X, r24
    1156:	0e c0       	rjmp	.+28     	; 0x1174 <TIMER0_u8Init+0x12a>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    1158:	ea 81       	ldd	r30, Y+2	; 0x02
    115a:	fb 81       	ldd	r31, Y+3	; 0x03
    115c:	83 81       	ldd	r24, Z+3	; 0x03
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	41 f4       	brne	.+16     	; 0x1172 <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8d 7f       	andi	r24, 0xFD	; 253
    116e:	8c 93       	st	X, r24
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <TIMER0_u8Init+0x12a>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1172:	19 82       	std	Y+1, r1	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1174:	ea 81       	ldd	r30, Y+2	; 0x02
    1176:	fb 81       	ldd	r31, Y+3	; 0x03
    1178:	84 81       	ldd	r24, Z+4	; 0x04
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	41 f4       	brne	.+16     	; 0x118e <TIMER0_u8Init+0x144>
			SET_BIT(TIMSK,TIMSK_TOIE0);
    117e:	a9 e5       	ldi	r26, 0x59	; 89
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e9 e5       	ldi	r30, 0x59	; 89
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	8c 93       	st	X, r24
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <TIMER0_u8Init+0x160>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    118e:	ea 81       	ldd	r30, Y+2	; 0x02
    1190:	fb 81       	ldd	r31, Y+3	; 0x03
    1192:	84 81       	ldd	r24, Z+4	; 0x04
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	41 f4       	brne	.+16     	; 0x11a8 <TIMER0_u8Init+0x15e>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
    1198:	a9 e5       	ldi	r26, 0x59	; 89
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e9 e5       	ldi	r30, 0x59	; 89
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	8c 93       	st	X, r24
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <TIMER0_u8Init+0x160>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    11a8:	19 82       	std	Y+1, r1	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
    11b8:	a3 e5       	ldi	r26, 0x53	; 83
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e3 e5       	ldi	r30, 0x53	; 83
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	90 81       	ld	r25, Z
    11c2:	ea 81       	ldd	r30, Y+2	; 0x02
    11c4:	fb 81       	ldd	r31, Y+3	; 0x03
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
    11c8:	89 2b       	or	r24, r25
    11ca:	8c 93       	st	X, r24
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <TIMER0_u8Init+0x188>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <TIMER0_delay_ms>:


u8 TIMER0_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	6b 97       	sbiw	r28, 0x1b	; 27
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	9b 8b       	std	Y+19, r25	; 0x13
    11f6:	8a 8b       	std	Y+18, r24	; 0x12
    11f8:	7d 8b       	std	Y+21, r23	; 0x15
    11fa:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8c 87       	std	Y+12, r24	; 0x0c
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	8b 87       	std	Y+11, r24	; 0x0b
    1204:	1a 86       	std	Y+10, r1	; 0x0a
    1206:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    1208:	8a 89       	ldd	r24, Y+18	; 0x12
    120a:	9b 89       	ldd	r25, Y+19	; 0x13
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	09 f4       	brne	.+2      	; 0x1212 <TIMER0_delay_ms+0x32>
    1210:	5a c0       	rjmp	.+180    	; 0x12c6 <TIMER0_delay_ms+0xe6>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1212:	ce 01       	movw	r24, r28
    1214:	0d 96       	adiw	r24, 0x0d	; 13
    1216:	98 8f       	std	Y+24, r25	; 0x18
    1218:	8f 8b       	std	Y+23, r24	; 0x17
    121a:	e0 e8       	ldi	r30, 0x80	; 128
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	fa 8f       	std	Y+26, r31	; 0x1a
    1220:	e9 8f       	std	Y+25, r30	; 0x19
    1222:	f5 e0       	ldi	r31, 0x05	; 5
    1224:	fb 8f       	std	Y+27, r31	; 0x1b
    1226:	e9 8d       	ldd	r30, Y+25	; 0x19
    1228:	fa 8d       	ldd	r31, Y+26	; 0x1a
    122a:	00 80       	ld	r0, Z
    122c:	89 8d       	ldd	r24, Y+25	; 0x19
    122e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	9a 8f       	std	Y+26, r25	; 0x1a
    1234:	89 8f       	std	Y+25, r24	; 0x19
    1236:	ef 89       	ldd	r30, Y+23	; 0x17
    1238:	f8 8d       	ldd	r31, Y+24	; 0x18
    123a:	00 82       	st	Z, r0
    123c:	8f 89       	ldd	r24, Y+23	; 0x17
    123e:	98 8d       	ldd	r25, Y+24	; 0x18
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	98 8f       	std	Y+24, r25	; 0x18
    1244:	8f 8b       	std	Y+23, r24	; 0x17
    1246:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	9b 8f       	std	Y+27, r25	; 0x1b
    124c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    124e:	ee 23       	and	r30, r30
    1250:	51 f7       	brne	.-44     	; 0x1226 <TIMER0_delay_ms+0x46>
		TIMER_u8SetCompMatch(TIMER0,250);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	6a ef       	ldi	r22, 0xFA	; 250
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    125c:	8c 89       	ldd	r24, Y+20	; 0x14
    125e:	9d 89       	ldd	r25, Y+21	; 0x15
    1260:	cc 01       	movw	r24, r24
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	28 ee       	ldi	r18, 0xE8	; 232
    1268:	33 e0       	ldi	r19, 0x03	; 3
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__mulsi3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	af 83       	std	Y+7, r26	; 0x07
    1280:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	af 81       	ldd	r26, Y+7	; 0x07
    1288:	b8 85       	ldd	r27, Y+8	; 0x08
    128a:	2a ef       	ldi	r18, 0xFA	; 250
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodsi4>
    129a:	da 01       	movw	r26, r20
    129c:	c9 01       	movw	r24, r18
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	ab 83       	std	Y+3, r26	; 0x03
    12a4:	bc 83       	std	Y+4, r27	; 0x04
		TIMER0_u8Init(&Timer);
    12a6:	ce 01       	movw	r24, r28
    12a8:	0d 96       	adiw	r24, 0x0d	; 13
    12aa:	0e 94 25 08 	call	0x104a	; 0x104a <TIMER0_u8Init>
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <TIMER0_delay_ms+0xd6>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF0)==1){
    12b0:	e8 e5       	ldi	r30, 0x58	; 88
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER0,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER0_u8Init(&Timer);
		while(Local_u8Break==1){
    12b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	d1 f3       	breq	.-12     	; 0x12b0 <TIMER0_delay_ms+0xd0>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF0);
				}
			}
		}
		TIMER0_u8Init(Copy_psTimer);
    12bc:	8a 89       	ldd	r24, Y+18	; 0x12
    12be:	9b 89       	ldd	r25, Y+19	; 0x13
    12c0:	0e 94 25 08 	call	0x104a	; 0x104a <TIMER0_u8Init>
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <TIMER0_delay_ms+0xea>

	}
	else{
		Local_u8ErrorState=NULL_PTR;
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    12ca:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    12cc:	6b 96       	adiw	r28, 0x1b	; 27
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <TIMER1_u8Init+0x6>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	9b 83       	std	Y+3, r25	; 0x03
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_psTimer!=NULL){
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	09 f4       	brne	.+2      	; 0x12fc <TIMER1_u8Init+0x1e>
    12fa:	92 c2       	rjmp	.+1316   	; 0x1820 <TIMER1_u8Init+0x542>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
    12fc:	ea 81       	ldd	r30, Y+2	; 0x02
    12fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1300:	80 81       	ld	r24, Z
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	e9 f4       	brne	.+58     	; 0x1340 <TIMER1_u8Init+0x62>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1306:	ae e4       	ldi	r26, 0x4E	; 78
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ee e4       	ldi	r30, 0x4E	; 78
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 7e       	andi	r24, 0xEF	; 239
    1312:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1314:	ae e4       	ldi	r26, 0x4E	; 78
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ee e4       	ldi	r30, 0x4E	; 78
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1322:	af e4       	ldi	r26, 0x4F	; 79
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ef e4       	ldi	r30, 0x4F	; 79
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1330:	af e4       	ldi	r26, 0x4F	; 79
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ef e4       	ldi	r30, 0x4F	; 79
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8e 7f       	andi	r24, 0xFE	; 254
    133c:	8c 93       	st	X, r24
    133e:	dd c1       	rjmp	.+954    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
    1340:	ea 81       	ldd	r30, Y+2	; 0x02
    1342:	fb 81       	ldd	r31, Y+3	; 0x03
    1344:	80 81       	ld	r24, Z
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	e9 f4       	brne	.+58     	; 0x1384 <TIMER1_u8Init+0xa6>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    134a:	ae e4       	ldi	r26, 0x4E	; 78
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ee e4       	ldi	r30, 0x4E	; 78
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7e       	andi	r24, 0xEF	; 239
    1356:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1358:	ae e4       	ldi	r26, 0x4E	; 78
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ee e4       	ldi	r30, 0x4E	; 78
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1366:	af e4       	ldi	r26, 0x4F	; 79
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ef e4       	ldi	r30, 0x4F	; 79
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1374:	af e4       	ldi	r26, 0x4F	; 79
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e4       	ldi	r30, 0x4F	; 79
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	8c 93       	st	X, r24
    1382:	bb c1       	rjmp	.+886    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
    1384:	ea 81       	ldd	r30, Y+2	; 0x02
    1386:	fb 81       	ldd	r31, Y+3	; 0x03
    1388:	80 81       	ld	r24, Z
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	e9 f4       	brne	.+58     	; 0x13c8 <TIMER1_u8Init+0xea>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    138e:	ae e4       	ldi	r26, 0x4E	; 78
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ee e4       	ldi	r30, 0x4E	; 78
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8f 7e       	andi	r24, 0xEF	; 239
    139a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    139c:	ae e4       	ldi	r26, 0x4E	; 78
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ee e4       	ldi	r30, 0x4E	; 78
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	87 7f       	andi	r24, 0xF7	; 247
    13a8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    13aa:	af e4       	ldi	r26, 0x4F	; 79
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ef e4       	ldi	r30, 0x4F	; 79
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	82 60       	ori	r24, 0x02	; 2
    13b6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    13b8:	af e4       	ldi	r26, 0x4F	; 79
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e4       	ldi	r30, 0x4F	; 79
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	8c 93       	st	X, r24
    13c6:	99 c1       	rjmp	.+818    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
    13c8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ca:	fb 81       	ldd	r31, Y+3	; 0x03
    13cc:	80 81       	ld	r24, Z
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	e9 f4       	brne	.+58     	; 0x140c <TIMER1_u8Init+0x12e>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    13d2:	ae e4       	ldi	r26, 0x4E	; 78
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ee e4       	ldi	r30, 0x4E	; 78
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 7e       	andi	r24, 0xEF	; 239
    13de:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	87 7f       	andi	r24, 0xF7	; 247
    13ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    13ee:	af e4       	ldi	r26, 0x4F	; 79
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ef e4       	ldi	r30, 0x4F	; 79
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    13fc:	af e4       	ldi	r26, 0x4F	; 79
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ef e4       	ldi	r30, 0x4F	; 79
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	8c 93       	st	X, r24
    140a:	77 c1       	rjmp	.+750    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	80 81       	ld	r24, Z
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	e9 f4       	brne	.+58     	; 0x1450 <TIMER1_u8Init+0x172>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1416:	ae e4       	ldi	r26, 0x4E	; 78
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ee e4       	ldi	r30, 0x4E	; 78
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7e       	andi	r24, 0xEF	; 239
    1422:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1424:	ae e4       	ldi	r26, 0x4E	; 78
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ee e4       	ldi	r30, 0x4E	; 78
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8d 7f       	andi	r24, 0xFD	; 253
    143e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1440:	af e4       	ldi	r26, 0x4F	; 79
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ef e4       	ldi	r30, 0x4F	; 79
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	8c 93       	st	X, r24
    144e:	55 c1       	rjmp	.+682    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
    1450:	ea 81       	ldd	r30, Y+2	; 0x02
    1452:	fb 81       	ldd	r31, Y+3	; 0x03
    1454:	80 81       	ld	r24, Z
    1456:	86 30       	cpi	r24, 0x06	; 6
    1458:	e9 f4       	brne	.+58     	; 0x1494 <TIMER1_u8Init+0x1b6>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    145a:	ae e4       	ldi	r26, 0x4E	; 78
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ee e4       	ldi	r30, 0x4E	; 78
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 7e       	andi	r24, 0xEF	; 239
    1466:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1468:	ae e4       	ldi	r26, 0x4E	; 78
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ee e4       	ldi	r30, 0x4E	; 78
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	88 60       	ori	r24, 0x08	; 8
    1474:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1476:	af e4       	ldi	r26, 0x4F	; 79
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ef e4       	ldi	r30, 0x4F	; 79
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8d 7f       	andi	r24, 0xFD	; 253
    1482:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1484:	af e4       	ldi	r26, 0x4F	; 79
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	8c 93       	st	X, r24
    1492:	33 c1       	rjmp	.+614    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
    1494:	ea 81       	ldd	r30, Y+2	; 0x02
    1496:	fb 81       	ldd	r31, Y+3	; 0x03
    1498:	80 81       	ld	r24, Z
    149a:	87 30       	cpi	r24, 0x07	; 7
    149c:	e9 f4       	brne	.+58     	; 0x14d8 <TIMER1_u8Init+0x1fa>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7e       	andi	r24, 0xEF	; 239
    14aa:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    14ac:	ae e4       	ldi	r26, 0x4E	; 78
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ee e4       	ldi	r30, 0x4E	; 78
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    14ba:	af e4       	ldi	r26, 0x4F	; 79
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e4       	ldi	r30, 0x4F	; 79
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    14c8:	af e4       	ldi	r26, 0x4F	; 79
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ef e4       	ldi	r30, 0x4F	; 79
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8e 7f       	andi	r24, 0xFE	; 254
    14d4:	8c 93       	st	X, r24
    14d6:	11 c1       	rjmp	.+546    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
    14d8:	ea 81       	ldd	r30, Y+2	; 0x02
    14da:	fb 81       	ldd	r31, Y+3	; 0x03
    14dc:	80 81       	ld	r24, Z
    14de:	88 30       	cpi	r24, 0x08	; 8
    14e0:	e9 f4       	brne	.+58     	; 0x151c <TIMER1_u8Init+0x23e>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    14e2:	ae e4       	ldi	r26, 0x4E	; 78
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ee e4       	ldi	r30, 0x4E	; 78
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 7e       	andi	r24, 0xEF	; 239
    14ee:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    14f0:	ae e4       	ldi	r26, 0x4E	; 78
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e4       	ldi	r30, 0x4E	; 78
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	88 60       	ori	r24, 0x08	; 8
    14fc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    14fe:	af e4       	ldi	r26, 0x4F	; 79
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e4       	ldi	r30, 0x4F	; 79
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	82 60       	ori	r24, 0x02	; 2
    150a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    150c:	af e4       	ldi	r26, 0x4F	; 79
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ef e4       	ldi	r30, 0x4F	; 79
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24
    151a:	ef c0       	rjmp	.+478    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
    151c:	ea 81       	ldd	r30, Y+2	; 0x02
    151e:	fb 81       	ldd	r31, Y+3	; 0x03
    1520:	80 81       	ld	r24, Z
    1522:	89 30       	cpi	r24, 0x09	; 9
    1524:	e9 f4       	brne	.+58     	; 0x1560 <TIMER1_u8Init+0x282>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1526:	ae e4       	ldi	r26, 0x4E	; 78
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1534:	ae e4       	ldi	r26, 0x4E	; 78
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1542:	af e4       	ldi	r26, 0x4F	; 79
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ef e4       	ldi	r30, 0x4F	; 79
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8d 7f       	andi	r24, 0xFD	; 253
    154e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1550:	af e4       	ldi	r26, 0x4F	; 79
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ef e4       	ldi	r30, 0x4F	; 79
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8e 7f       	andi	r24, 0xFE	; 254
    155c:	8c 93       	st	X, r24
    155e:	cd c0       	rjmp	.+410    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
    1560:	ea 81       	ldd	r30, Y+2	; 0x02
    1562:	fb 81       	ldd	r31, Y+3	; 0x03
    1564:	80 81       	ld	r24, Z
    1566:	8a 30       	cpi	r24, 0x0A	; 10
    1568:	e9 f4       	brne	.+58     	; 0x15a4 <TIMER1_u8Init+0x2c6>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    156a:	ae e4       	ldi	r26, 0x4E	; 78
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	ee e4       	ldi	r30, 0x4E	; 78
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 61       	ori	r24, 0x10	; 16
    1576:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1578:	ae e4       	ldi	r26, 0x4E	; 78
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ee e4       	ldi	r30, 0x4E	; 78
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1586:	af e4       	ldi	r26, 0x4F	; 79
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e4       	ldi	r30, 0x4F	; 79
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8d 7f       	andi	r24, 0xFD	; 253
    1592:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1594:	af e4       	ldi	r26, 0x4F	; 79
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e4       	ldi	r30, 0x4F	; 79
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	81 60       	ori	r24, 0x01	; 1
    15a0:	8c 93       	st	X, r24
    15a2:	ab c0       	rjmp	.+342    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
    15a4:	ea 81       	ldd	r30, Y+2	; 0x02
    15a6:	fb 81       	ldd	r31, Y+3	; 0x03
    15a8:	80 81       	ld	r24, Z
    15aa:	8b 30       	cpi	r24, 0x0B	; 11
    15ac:	e9 f4       	brne	.+58     	; 0x15e8 <TIMER1_u8Init+0x30a>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 61       	ori	r24, 0x10	; 16
    15ba:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    15ca:	af e4       	ldi	r26, 0x4F	; 79
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e4       	ldi	r30, 0x4F	; 79
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    15d8:	af e4       	ldi	r26, 0x4F	; 79
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ef e4       	ldi	r30, 0x4F	; 79
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8e 7f       	andi	r24, 0xFE	; 254
    15e4:	8c 93       	st	X, r24
    15e6:	89 c0       	rjmp	.+274    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
    15e8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ea:	fb 81       	ldd	r31, Y+3	; 0x03
    15ec:	80 81       	ld	r24, Z
    15ee:	8c 30       	cpi	r24, 0x0C	; 12
    15f0:	e9 f4       	brne	.+58     	; 0x162c <TIMER1_u8Init+0x34e>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    15f2:	ae e4       	ldi	r26, 0x4E	; 78
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ee e4       	ldi	r30, 0x4E	; 78
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1600:	ae e4       	ldi	r26, 0x4E	; 78
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ee e4       	ldi	r30, 0x4E	; 78
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	87 7f       	andi	r24, 0xF7	; 247
    160c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    160e:	af e4       	ldi	r26, 0x4F	; 79
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e4       	ldi	r30, 0x4F	; 79
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	82 60       	ori	r24, 0x02	; 2
    161a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    161c:	af e4       	ldi	r26, 0x4F	; 79
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ef e4       	ldi	r30, 0x4F	; 79
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	8c 93       	st	X, r24
    162a:	67 c0       	rjmp	.+206    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
    162c:	ea 81       	ldd	r30, Y+2	; 0x02
    162e:	fb 81       	ldd	r31, Y+3	; 0x03
    1630:	80 81       	ld	r24, Z
    1632:	8d 30       	cpi	r24, 0x0D	; 13
    1634:	e9 f4       	brne	.+58     	; 0x1670 <TIMER1_u8Init+0x392>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1636:	ae e4       	ldi	r26, 0x4E	; 78
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ee e4       	ldi	r30, 0x4E	; 78
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 61       	ori	r24, 0x10	; 16
    1642:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1644:	ae e4       	ldi	r26, 0x4E	; 78
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	88 60       	ori	r24, 0x08	; 8
    1650:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1652:	af e4       	ldi	r26, 0x4F	; 79
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ef e4       	ldi	r30, 0x4F	; 79
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8d 7f       	andi	r24, 0xFD	; 253
    165e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1660:	af e4       	ldi	r26, 0x4F	; 79
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ef e4       	ldi	r30, 0x4F	; 79
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8e 7f       	andi	r24, 0xFE	; 254
    166c:	8c 93       	st	X, r24
    166e:	45 c0       	rjmp	.+138    	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
    1670:	ea 81       	ldd	r30, Y+2	; 0x02
    1672:	fb 81       	ldd	r31, Y+3	; 0x03
    1674:	80 81       	ld	r24, Z
    1676:	8e 30       	cpi	r24, 0x0E	; 14
    1678:	e9 f4       	brne	.+58     	; 0x16b4 <TIMER1_u8Init+0x3d6>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    167a:	ae e4       	ldi	r26, 0x4E	; 78
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e4       	ldi	r30, 0x4E	; 78
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 61       	ori	r24, 0x10	; 16
    1686:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1688:	ae e4       	ldi	r26, 0x4E	; 78
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ee e4       	ldi	r30, 0x4E	; 78
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	88 60       	ori	r24, 0x08	; 8
    1694:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    16a4:	af e4       	ldi	r26, 0x4F	; 79
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ef e4       	ldi	r30, 0x4F	; 79
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	8c 93       	st	X, r24
    16b2:	23 c0       	rjmp	.+70     	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
    16b4:	ea 81       	ldd	r30, Y+2	; 0x02
    16b6:	fb 81       	ldd	r31, Y+3	; 0x03
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 30       	cpi	r24, 0x0F	; 15
    16bc:	e9 f4       	brne	.+58     	; 0x16f8 <TIMER1_u8Init+0x41a>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    16be:	ae e4       	ldi	r26, 0x4E	; 78
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ee e4       	ldi	r30, 0x4E	; 78
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 61       	ori	r24, 0x10	; 16
    16ca:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    16cc:	ae e4       	ldi	r26, 0x4E	; 78
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ee e4       	ldi	r30, 0x4E	; 78
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	88 60       	ori	r24, 0x08	; 8
    16d8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    16da:	af e4       	ldi	r26, 0x4F	; 79
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ef e4       	ldi	r30, 0x4F	; 79
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	82 60       	ori	r24, 0x02	; 2
    16e6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    16e8:	af e4       	ldi	r26, 0x4F	; 79
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ef e4       	ldi	r30, 0x4F	; 79
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	81 60       	ori	r24, 0x01	; 1
    16f4:	8c 93       	st	X, r24
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    16f8:	19 82       	std	Y+1, r1	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    16fa:	af e4       	ldi	r26, 0x4F	; 79
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e4       	ldi	r30, 0x4F	; 79
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 70       	andi	r24, 0x0F	; 15
    1706:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
    1708:	af e4       	ldi	r26, 0x4F	; 79
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ef e4       	ldi	r30, 0x4F	; 79
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	ea 81       	ldd	r30, Y+2	; 0x02
    1716:	fb 81       	ldd	r31, Y+3	; 0x03
    1718:	83 81       	ldd	r24, Z+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	82 95       	swap	r24
    1720:	92 95       	swap	r25
    1722:	90 7f       	andi	r25, 0xF0	; 240
    1724:	98 27       	eor	r25, r24
    1726:	80 7f       	andi	r24, 0xF0	; 240
    1728:	98 27       	eor	r25, r24
    172a:	82 2b       	or	r24, r18
    172c:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
    172e:	af e4       	ldi	r26, 0x4F	; 79
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e4       	ldi	r30, 0x4F	; 79
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	ea 81       	ldd	r30, Y+2	; 0x02
    173c:	fb 81       	ldd	r31, Y+3	; 0x03
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	00 24       	eor	r0, r0
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	07 94       	ror	r0
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	07 94       	ror	r0
    1752:	98 2f       	mov	r25, r24
    1754:	80 2d       	mov	r24, r0
    1756:	82 2b       	or	r24, r18
    1758:	8c 93       	st	X, r24


		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
    175a:	ea 81       	ldd	r30, Y+2	; 0x02
    175c:	fb 81       	ldd	r31, Y+3	; 0x03
    175e:	84 81       	ldd	r24, Z+4	; 0x04
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	41 f4       	brne	.+16     	; 0x1774 <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
    1764:	a9 e5       	ldi	r26, 0x59	; 89
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e9 e5       	ldi	r30, 0x59	; 89
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 61       	ori	r24, 0x10	; 16
    1770:	8c 93       	st	X, r24
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <TIMER1_u8Init+0x4b2>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
    1774:	ea 81       	ldd	r30, Y+2	; 0x02
    1776:	fb 81       	ldd	r31, Y+3	; 0x03
    1778:	84 81       	ldd	r24, Z+4	; 0x04
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	41 f4       	brne	.+16     	; 0x178e <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
    177e:	a9 e5       	ldi	r26, 0x59	; 89
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e9 e5       	ldi	r30, 0x59	; 89
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8f 7e       	andi	r24, 0xEF	; 239
    178a:	8c 93       	st	X, r24
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <TIMER1_u8Init+0x4b2>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    178e:	19 82       	std	Y+1, r1	; 0x01
		}

		//Compare Match Interrupt
		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	85 81       	ldd	r24, Z+5	; 0x05
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	41 f4       	brne	.+16     	; 0x17aa <TIMER1_u8Init+0x4cc>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
    179a:	a9 e5       	ldi	r26, 0x59	; 89
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e9 e5       	ldi	r30, 0x59	; 89
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 60       	ori	r24, 0x08	; 8
    17a6:	8c 93       	st	X, r24
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <TIMER1_u8Init+0x4e8>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
    17aa:	ea 81       	ldd	r30, Y+2	; 0x02
    17ac:	fb 81       	ldd	r31, Y+3	; 0x03
    17ae:	85 81       	ldd	r24, Z+5	; 0x05
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	41 f4       	brne	.+16     	; 0x17c4 <TIMER1_u8Init+0x4e6>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
    17b4:	a9 e5       	ldi	r26, 0x59	; 89
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e9 e5       	ldi	r30, 0x59	; 89
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	87 7f       	andi	r24, 0xF7	; 247
    17c0:	8c 93       	st	X, r24
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <TIMER1_u8Init+0x4e8>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    17c4:	19 82       	std	Y+1, r1	; 0x01
		}


		//OverFlow Interrupt
		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    17c6:	ea 81       	ldd	r30, Y+2	; 0x02
    17c8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ca:	86 81       	ldd	r24, Z+6	; 0x06
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <TIMER1_u8Init+0x502>
			SET_BIT(TIMSK,TIMSK_TOIE1);
    17d0:	a9 e5       	ldi	r26, 0x59	; 89
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e9 e5       	ldi	r30, 0x59	; 89
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	84 60       	ori	r24, 0x04	; 4
    17dc:	8c 93       	st	X, r24
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <TIMER1_u8Init+0x51e>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    17e0:	ea 81       	ldd	r30, Y+2	; 0x02
    17e2:	fb 81       	ldd	r31, Y+3	; 0x03
    17e4:	86 81       	ldd	r24, Z+6	; 0x06
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	41 f4       	brne	.+16     	; 0x17fa <TIMER1_u8Init+0x51c>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    17ea:	a9 e5       	ldi	r26, 0x59	; 89
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e9 e5       	ldi	r30, 0x59	; 89
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8b 7f       	andi	r24, 0xFB	; 251
    17f6:	8c 93       	st	X, r24
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <TIMER1_u8Init+0x51e>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    17fa:	19 82       	std	Y+1, r1	; 0x01
		}


		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    17fc:	ae e4       	ldi	r26, 0x4E	; 78
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ee e4       	ldi	r30, 0x4E	; 78
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	88 7f       	andi	r24, 0xF8	; 248
    1808:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    180a:	ae e4       	ldi	r26, 0x4E	; 78
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ee e4       	ldi	r30, 0x4E	; 78
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	90 81       	ld	r25, Z
    1814:	ea 81       	ldd	r30, Y+2	; 0x02
    1816:	fb 81       	ldd	r31, Y+3	; 0x03
    1818:	81 81       	ldd	r24, Z+1	; 0x01
    181a:	89 2b       	or	r24, r25
    181c:	8c 93       	st	X, r24
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <TIMER1_u8Init+0x546>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1824:	89 81       	ldd	r24, Y+1	; 0x01

}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <TIMER1_voidSetTopValue+0x6>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    1840:	e6 e4       	ldi	r30, 0x46	; 70
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <TIMER1_u8PWMGenerate>:

u8 TIMER1_u8PWMGenerate(Timer1_t* Copy_psTimer,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	29 97       	sbiw	r28, 0x09	; 9
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	7d 83       	std	Y+5, r23	; 0x05
    1870:	6c 83       	std	Y+4, r22	; 0x04
    1872:	5f 83       	std	Y+7, r21	; 0x07
    1874:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState=OK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_psTimer!=NULL){
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	09 f4       	brne	.+2      	; 0x1884 <TIMER1_u8PWMGenerate+0x2e>
    1882:	98 c0       	rjmp	.+304    	; 0x19b4 <TIMER1_u8PWMGenerate+0x15e>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	80 81       	ld	r24, Z
    188a:	8e 30       	cpi	r24, 0x0E	; 14
    188c:	09 f0       	breq	.+2      	; 0x1890 <TIMER1_u8PWMGenerate+0x3a>
    188e:	90 c0       	rjmp	.+288    	; 0x19b0 <TIMER1_u8PWMGenerate+0x15a>
			switch(Copy_psTimer->Prescaler){
    1890:	ea 81       	ldd	r30, Y+2	; 0x02
    1892:	fb 81       	ldd	r31, Y+3	; 0x03
    1894:	81 81       	ldd	r24, Z+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	39 87       	std	Y+9, r19	; 0x09
    189c:	28 87       	std	Y+8, r18	; 0x08
    189e:	88 85       	ldd	r24, Y+8	; 0x08
    18a0:	99 85       	ldd	r25, Y+9	; 0x09
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	79 f1       	breq	.+94     	; 0x1906 <TIMER1_u8PWMGenerate+0xb0>
    18a8:	28 85       	ldd	r18, Y+8	; 0x08
    18aa:	39 85       	ldd	r19, Y+9	; 0x09
    18ac:	24 30       	cpi	r18, 0x04	; 4
    18ae:	31 05       	cpc	r19, r1
    18b0:	5c f4       	brge	.+22     	; 0x18c8 <TIMER1_u8PWMGenerate+0x72>
    18b2:	88 85       	ldd	r24, Y+8	; 0x08
    18b4:	99 85       	ldd	r25, Y+9	; 0x09
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	89 f0       	breq	.+34     	; 0x18de <TIMER1_u8PWMGenerate+0x88>
    18bc:	28 85       	ldd	r18, Y+8	; 0x08
    18be:	39 85       	ldd	r19, Y+9	; 0x09
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	c9 f0       	breq	.+50     	; 0x18f8 <TIMER1_u8PWMGenerate+0xa2>
    18c6:	47 c0       	rjmp	.+142    	; 0x1956 <TIMER1_u8PWMGenerate+0x100>
    18c8:	88 85       	ldd	r24, Y+8	; 0x08
    18ca:	99 85       	ldd	r25, Y+9	; 0x09
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	91 05       	cpc	r25, r1
    18d0:	39 f1       	breq	.+78     	; 0x1920 <TIMER1_u8PWMGenerate+0xca>
    18d2:	28 85       	ldd	r18, Y+8	; 0x08
    18d4:	39 85       	ldd	r19, Y+9	; 0x09
    18d6:	25 30       	cpi	r18, 0x05	; 5
    18d8:	31 05       	cpc	r19, r1
    18da:	89 f1       	breq	.+98     	; 0x193e <TIMER1_u8PWMGenerate+0xe8>
    18dc:	3c c0       	rjmp	.+120    	; 0x1956 <TIMER1_u8PWMGenerate+0x100>
			case PRSCLR_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    18de:	e6 e4       	ldi	r30, 0x46	; 70
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	30 c0       	rjmp	.+96     	; 0x1958 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    18f8:	e6 e4       	ldi	r30, 0x46	; 70
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	29 c0       	rjmp	.+82     	; 0x1958 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    1906:	e6 e4       	ldi	r30, 0x46	; 70
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	96 95       	lsr	r25
    1914:	87 95       	ror	r24
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	1c c0       	rjmp	.+56     	; 0x1958 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    1920:	e6 e4       	ldi	r30, 0x46	; 70
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	92 95       	swap	r25
    192e:	82 95       	swap	r24
    1930:	8f 70       	andi	r24, 0x0F	; 15
    1932:	89 27       	eor	r24, r25
    1934:	9f 70       	andi	r25, 0x0F	; 15
    1936:	89 27       	eor	r24, r25
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	0d c0       	rjmp	.+26     	; 0x1958 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    193e:	e6 e4       	ldi	r30, 0x46	; 70
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	88 0f       	add	r24, r24
    1948:	89 2f       	mov	r24, r25
    194a:	88 1f       	adc	r24, r24
    194c:	99 0b       	sbc	r25, r25
    194e:	91 95       	neg	r25
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <TIMER1_u8PWMGenerate+0x102>
			default: Local_u8ErrorState=NOT_OK;
    1956:	19 82       	std	Y+1, r1	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    1958:	2e 81       	ldd	r18, Y+6	; 0x06
    195a:	3f 81       	ldd	r19, Y+7	; 0x07
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	82 17       	cp	r24, r18
    1962:	93 07       	cpc	r25, r19
    1964:	18 f1       	brcs	.+70     	; 0x19ac <TIMER1_u8PWMGenerate+0x156>
				if((Copy_psTimer->CompareMatchOutputMode_A)== OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_B) == OCM_DISCONNECT ){
    1966:	ea 81       	ldd	r30, Y+2	; 0x02
    1968:	fb 81       	ldd	r31, Y+3	; 0x03
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	59 f4       	brne	.+22     	; 0x1986 <TIMER1_u8PWMGenerate+0x130>
    1970:	ea 81       	ldd	r30, Y+2	; 0x02
    1972:	fb 81       	ldd	r31, Y+3	; 0x03
    1974:	83 81       	ldd	r24, Z+3	; 0x03
    1976:	88 23       	and	r24, r24
    1978:	31 f4       	brne	.+12     	; 0x1986 <TIMER1_u8PWMGenerate+0x130>
					OCR1A=Copy_u16OnTime;
    197a:	ea e4       	ldi	r30, 0x4A	; 74
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8e 81       	ldd	r24, Y+6	; 0x06
    1980:	9f 81       	ldd	r25, Y+7	; 0x07
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
				}
				if( (Copy_psTimer->CompareMatchOutputMode_B) == OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_A) == OCM_DISCONNECT ){
    1986:	ea 81       	ldd	r30, Y+2	; 0x02
    1988:	fb 81       	ldd	r31, Y+3	; 0x03
    198a:	83 81       	ldd	r24, Z+3	; 0x03
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	61 f4       	brne	.+24     	; 0x19a8 <TIMER1_u8PWMGenerate+0x152>
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	88 23       	and	r24, r24
    1998:	39 f4       	brne	.+14     	; 0x19a8 <TIMER1_u8PWMGenerate+0x152>
					OCR1B=Copy_u16OnTime;
    199a:	e8 e4       	ldi	r30, 0x48	; 72
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	9f 81       	ldd	r25, Y+7	; 0x07
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	08 c0       	rjmp	.+16     	; 0x19b8 <TIMER1_u8PWMGenerate+0x162>
				}
				else{
					Local_u8ErrorState=NOT_OK;
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <TIMER1_u8PWMGenerate+0x162>
				}
			}
			else{
				Local_u8ErrorState=NOT_OK;
    19ac:	19 82       	std	Y+1, r1	; 0x01
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <TIMER1_u8PWMGenerate+0x162>

			}
		}
		else{
			Local_u8ErrorState=NOT_OK;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <TIMER1_u8PWMGenerate+0x162>
		}
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    19ba:	29 96       	adiw	r28, 0x09	; 9
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <TIMER2_u8Init>:

/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/


u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <TIMER2_u8Init+0x6>
    19d2:	0f 92       	push	r0
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	9b 83       	std	Y+3, r25	; 0x03
    19da:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	9b 81       	ldd	r25, Y+3	; 0x03
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	09 f4       	brne	.+2      	; 0x19ea <TIMER2_u8Init+0x1e>
    19e8:	b3 c0       	rjmp	.+358    	; 0x1b50 <TIMER2_u8Init+0x184>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    19ea:	ea 81       	ldd	r30, Y+2	; 0x02
    19ec:	fb 81       	ldd	r31, Y+3	; 0x03
    19ee:	80 81       	ld	r24, Z
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	79 f4       	brne	.+30     	; 0x1a12 <TIMER2_u8Init+0x46>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    19f4:	a5 e4       	ldi	r26, 0x45	; 69
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e5 e4       	ldi	r30, 0x45	; 69
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	87 7f       	andi	r24, 0xF7	; 247
    1a00:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1a02:	a5 e4       	ldi	r26, 0x45	; 69
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e4       	ldi	r30, 0x45	; 69
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8f 7b       	andi	r24, 0xBF	; 191
    1a0e:	8c 93       	st	X, r24
    1a10:	3d c0       	rjmp	.+122    	; 0x1a8c <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1a12:	ea 81       	ldd	r30, Y+2	; 0x02
    1a14:	fb 81       	ldd	r31, Y+3	; 0x03
    1a16:	80 81       	ld	r24, Z
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	79 f4       	brne	.+30     	; 0x1a3a <TIMER2_u8Init+0x6e>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    1a1c:	a5 e4       	ldi	r26, 0x45	; 69
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e4       	ldi	r30, 0x45	; 69
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	87 7f       	andi	r24, 0xF7	; 247
    1a28:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    1a2a:	a5 e4       	ldi	r26, 0x45	; 69
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e4       	ldi	r30, 0x45	; 69
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 64       	ori	r24, 0x40	; 64
    1a36:	8c 93       	st	X, r24
    1a38:	29 c0       	rjmp	.+82     	; 0x1a8c <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    1a3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3e:	80 81       	ld	r24, Z
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	79 f4       	brne	.+30     	; 0x1a62 <TIMER2_u8Init+0x96>
			SET_BIT(TCCR2,TCCR2_WGM21);
    1a44:	a5 e4       	ldi	r26, 0x45	; 69
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e4       	ldi	r30, 0x45	; 69
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 60       	ori	r24, 0x08	; 8
    1a50:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1a52:	a5 e4       	ldi	r26, 0x45	; 69
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e4       	ldi	r30, 0x45	; 69
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7b       	andi	r24, 0xBF	; 191
    1a5e:	8c 93       	st	X, r24
    1a60:	15 c0       	rjmp	.+42     	; 0x1a8c <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    1a62:	ea 81       	ldd	r30, Y+2	; 0x02
    1a64:	fb 81       	ldd	r31, Y+3	; 0x03
    1a66:	80 81       	ld	r24, Z
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	79 f4       	brne	.+30     	; 0x1a8a <TIMER2_u8Init+0xbe>
			SET_BIT(TCCR2,TCCR2_WGM21);
    1a6c:	a5 e4       	ldi	r26, 0x45	; 69
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e4       	ldi	r30, 0x45	; 69
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 60       	ori	r24, 0x08	; 8
    1a78:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    1a7a:	a5 e4       	ldi	r26, 0x45	; 69
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e5 e4       	ldi	r30, 0x45	; 69
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	8c 93       	st	X, r24
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    1a8c:	a5 e4       	ldi	r26, 0x45	; 69
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e4       	ldi	r30, 0x45	; 69
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7c       	andi	r24, 0xCF	; 207
    1a98:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    1a9a:	a5 e4       	ldi	r26, 0x45	; 69
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e4       	ldi	r30, 0x45	; 69
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	82 95       	swap	r24
    1ab2:	92 95       	swap	r25
    1ab4:	90 7f       	andi	r25, 0xF0	; 240
    1ab6:	98 27       	eor	r25, r24
    1ab8:	80 7f       	andi	r24, 0xF0	; 240
    1aba:	98 27       	eor	r25, r24
    1abc:	82 2b       	or	r24, r18
    1abe:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    1ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac4:	83 81       	ldd	r24, Z+3	; 0x03
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	41 f4       	brne	.+16     	; 0x1ada <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    1aca:	a9 e5       	ldi	r26, 0x59	; 89
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e9 e5       	ldi	r30, 0x59	; 89
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 68       	ori	r24, 0x80	; 128
    1ad6:	8c 93       	st	X, r24
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <TIMER2_u8Init+0x12a>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    1ada:	ea 81       	ldd	r30, Y+2	; 0x02
    1adc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	82 30       	cpi	r24, 0x02	; 2
    1ae2:	41 f4       	brne	.+16     	; 0x1af4 <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    1ae4:	a9 e5       	ldi	r26, 0x59	; 89
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e9 e5       	ldi	r30, 0x59	; 89
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8f 77       	andi	r24, 0x7F	; 127
    1af0:	8c 93       	st	X, r24
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <TIMER2_u8Init+0x12a>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1af4:	19 82       	std	Y+1, r1	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1af6:	ea 81       	ldd	r30, Y+2	; 0x02
    1af8:	fb 81       	ldd	r31, Y+3	; 0x03
    1afa:	84 81       	ldd	r24, Z+4	; 0x04
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <TIMER2_u8Init+0x144>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    1b00:	a9 e5       	ldi	r26, 0x59	; 89
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e9 e5       	ldi	r30, 0x59	; 89
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	8c 93       	st	X, r24
    1b0e:	0e c0       	rjmp	.+28     	; 0x1b2c <TIMER2_u8Init+0x160>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	84 81       	ldd	r24, Z+4	; 0x04
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	41 f4       	brne	.+16     	; 0x1b2a <TIMER2_u8Init+0x15e>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    1b1a:	a9 e5       	ldi	r26, 0x59	; 89
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e9 e5       	ldi	r30, 0x59	; 89
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 7b       	andi	r24, 0xBF	; 191
    1b26:	8c 93       	st	X, r24
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <TIMER2_u8Init+0x160>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    1b2c:	a5 e4       	ldi	r26, 0x45	; 69
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e5 e4       	ldi	r30, 0x45	; 69
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	88 7f       	andi	r24, 0xF8	; 248
    1b38:	8c 93       	st	X, r24
		TCCR2|=(Copy_psTimer->Prescaler);
    1b3a:	a5 e4       	ldi	r26, 0x45	; 69
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e4       	ldi	r30, 0x45	; 69
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	90 81       	ld	r25, Z
    1b44:	ea 81       	ldd	r30, Y+2	; 0x02
    1b46:	fb 81       	ldd	r31, Y+3	; 0x03
    1b48:	81 81       	ldd	r24, Z+1	; 0x01
    1b4a:	89 2b       	or	r24, r25
    1b4c:	8c 93       	st	X, r24
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <TIMER2_u8Init+0x188>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	6b 97       	sbiw	r28, 0x1b	; 27
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	9b 8b       	std	Y+19, r25	; 0x13
    1b78:	8a 8b       	std	Y+18, r24	; 0x12
    1b7a:	7d 8b       	std	Y+21, r23	; 0x15
    1b7c:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	8c 87       	std	Y+12, r24	; 0x0c
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	8b 87       	std	Y+11, r24	; 0x0b
    1b86:	1a 86       	std	Y+10, r1	; 0x0a
    1b88:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    1b8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b8c:	9b 89       	ldd	r25, Y+19	; 0x13
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <TIMER2_delay_ms+0x32>
    1b92:	5a c0       	rjmp	.+180    	; 0x1c48 <TIMER2_delay_ms+0xe6>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1b94:	ce 01       	movw	r24, r28
    1b96:	0d 96       	adiw	r24, 0x0d	; 13
    1b98:	98 8f       	std	Y+24, r25	; 0x18
    1b9a:	8f 8b       	std	Y+23, r24	; 0x17
    1b9c:	e5 e8       	ldi	r30, 0x85	; 133
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	fa 8f       	std	Y+26, r31	; 0x1a
    1ba2:	e9 8f       	std	Y+25, r30	; 0x19
    1ba4:	f5 e0       	ldi	r31, 0x05	; 5
    1ba6:	fb 8f       	std	Y+27, r31	; 0x1b
    1ba8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1baa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bac:	00 80       	ld	r0, Z
    1bae:	89 8d       	ldd	r24, Y+25	; 0x19
    1bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb6:	89 8f       	std	Y+25, r24	; 0x19
    1bb8:	ef 89       	ldd	r30, Y+23	; 0x17
    1bba:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bbc:	00 82       	st	Z, r0
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	98 8f       	std	Y+24, r25	; 0x18
    1bc6:	8f 8b       	std	Y+23, r24	; 0x17
    1bc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bca:	91 50       	subi	r25, 0x01	; 1
    1bcc:	9b 8f       	std	Y+27, r25	; 0x1b
    1bce:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1bd0:	ee 23       	and	r30, r30
    1bd2:	51 f7       	brne	.-44     	; 0x1ba8 <TIMER2_delay_ms+0x46>
		TIMER_u8SetCompMatch(TIMER2,250);
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	6a ef       	ldi	r22, 0xFA	; 250
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    1bde:	8c 89       	ldd	r24, Y+20	; 0x14
    1be0:	9d 89       	ldd	r25, Y+21	; 0x15
    1be2:	cc 01       	movw	r24, r24
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	28 ee       	ldi	r18, 0xE8	; 232
    1bea:	33 e0       	ldi	r19, 0x03	; 3
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__mulsi3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	af 83       	std	Y+7, r26	; 0x07
    1c02:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	af 81       	ldd	r26, Y+7	; 0x07
    1c0a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c0c:	2a ef       	ldi	r18, 0xFA	; 250
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodsi4>
    1c1c:	da 01       	movw	r26, r20
    1c1e:	c9 01       	movw	r24, r18
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	ab 83       	std	Y+3, r26	; 0x03
    1c26:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    1c28:	ce 01       	movw	r24, r28
    1c2a:	0d 96       	adiw	r24, 0x0d	; 13
    1c2c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <TIMER2_delay_ms+0xd6>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    1c32:	e8 e5       	ldi	r30, 0x58	; 88
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    1c38:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	d1 f3       	breq	.-12     	; 0x1c32 <TIMER2_delay_ms+0xd0>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    1c3e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c40:	9b 89       	ldd	r25, Y+19	; 0x13
    1c42:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <TIMER2_delay_ms+0xea>

	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    1c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1c4e:	6b 96       	adiw	r28, 0x1b	; 27
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <TIMER2_delay_us>:

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	6c 97       	sbiw	r28, 0x1c	; 28
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	7e 8b       	std	Y+22, r23	; 0x16
    1c7a:	6d 8b       	std	Y+21, r22	; 0x15
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	8d 87       	std	Y+13, r24	; 0x0d
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8c 87       	std	Y+12, r24	; 0x0c
    1c84:	1a 86       	std	Y+10, r1	; 0x0a
    1c86:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <TIMER2_delay_us+0x32>
    1c90:	5d c0       	rjmp	.+186    	; 0x1d4c <TIMER2_delay_us+0xec>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1c92:	ce 01       	movw	r24, r28
    1c94:	0e 96       	adiw	r24, 0x0e	; 14
    1c96:	99 8f       	std	Y+25, r25	; 0x19
    1c98:	88 8f       	std	Y+24, r24	; 0x18
    1c9a:	ea e8       	ldi	r30, 0x8A	; 138
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	fb 8f       	std	Y+27, r31	; 0x1b
    1ca0:	ea 8f       	std	Y+26, r30	; 0x1a
    1ca2:	f5 e0       	ldi	r31, 0x05	; 5
    1ca4:	fc 8f       	std	Y+28, r31	; 0x1c
    1ca6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ca8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1caa:	00 80       	ld	r0, Z
    1cac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	9b 8f       	std	Y+27, r25	; 0x1b
    1cb4:	8a 8f       	std	Y+26, r24	; 0x1a
    1cb6:	e8 8d       	ldd	r30, Y+24	; 0x18
    1cb8:	f9 8d       	ldd	r31, Y+25	; 0x19
    1cba:	00 82       	st	Z, r0
    1cbc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cbe:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	99 8f       	std	Y+25, r25	; 0x19
    1cc4:	88 8f       	std	Y+24, r24	; 0x18
    1cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc8:	91 50       	subi	r25, 0x01	; 1
    1cca:	9c 8f       	std	Y+28, r25	; 0x1c
    1ccc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cce:	ee 23       	and	r30, r30
    1cd0:	51 f7       	brne	.-44     	; 0x1ca6 <TIMER2_delay_us+0x46>
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	8b 87       	std	Y+11, r24	; 0x0b
    1cd6:	0d c0       	rjmp	.+26     	; 0x1cf2 <TIMER2_delay_us+0x92>
			if(Copy_u16Time%Local_u8CompMatch==0){
    1cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8d 89       	ldd	r24, Y+21	; 0x15
    1ce0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	0e 94 82 1c 	call	0x3904	; 0x3904 <__udivmodhi4>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <TIMER2_delay_us+0x98>

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
	if(Copy_psTimer!=NULL){
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    1cec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cee:	81 50       	subi	r24, 0x01	; 1
    1cf0:	8b 87       	std	Y+11, r24	; 0x0b
    1cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cf4:	88 23       	and	r24, r24
    1cf6:	81 f7       	brne	.-32     	; 0x1cd8 <TIMER2_delay_us+0x78>
			if(Copy_u16Time%Local_u8CompMatch==0){
				break;
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
    1cf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	b9 01       	movw	r22, r18
    1d02:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER_u8SetCompMatch>
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
    1d06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	af 81       	ldd	r26, Y+7	; 0x07
    1d16:	b8 85       	ldd	r27, Y+8	; 0x08
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodsi4>
    1d20:	da 01       	movw	r26, r20
    1d22:	c9 01       	movw	r24, r18
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	ab 83       	std	Y+3, r26	; 0x03
    1d2a:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	0e 96       	adiw	r24, 0x0e	; 14
    1d30:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <TIMER2_delay_us+0xdc>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    1d36:	e8 e5       	ldi	r30, 0x58	; 88
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    1d3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	d1 f3       	breq	.-12     	; 0x1d36 <TIMER2_delay_us+0xd6>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <TIMER2_delay_us+0xf0>

	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return Local_u8ErrorState;
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1d52:	6c 96       	adiw	r28, 0x1c	; 28
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <TIMER2_u8PWMGenerate>:

u8 TIMER2_u8PWMGenerate(Timer_t* Copy_psTimer,u8 Copy_u8DutyCycle){
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <TIMER2_u8PWMGenerate+0xe>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <TIMER2_u8PWMGenerate+0x10>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9b 83       	std	Y+3, r25	; 0x03
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_psTimer!=NULL){
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	31 f1       	breq	.+76     	; 0x1dd6 <TIMER2_u8PWMGenerate+0x72>
		if((Copy_psTimer->WaveGenMode) == TIMER_FAST_PWM && (Copy_psTimer->CompareMatchOutputMode)== OCM_FAST_PWM_NON_INVERTED ){
    1d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8e:	80 81       	ld	r24, Z
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	f9 f4       	brne	.+62     	; 0x1dd2 <TIMER2_u8PWMGenerate+0x6e>
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	d1 f4       	brne	.+52     	; 0x1dd2 <TIMER2_u8PWMGenerate+0x6e>
			OCR2 = MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    1d9e:	0f 2e       	mov	r0, r31
    1da0:	f3 e4       	ldi	r31, 0x43	; 67
    1da2:	ef 2e       	mov	r14, r31
    1da4:	ff 24       	eor	r15, r15
    1da6:	f0 2d       	mov	r31, r0
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	e8 2f       	mov	r30, r24
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	64 e6       	ldi	r22, 0x64	; 100
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	2f ef       	ldi	r18, 0xFF	; 255
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8f 01       	movw	r16, r30
    1dc0:	0e 94 17 19 	call	0x322e	; 0x322e <MATH_s32Map>
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	80 83       	st	Z, r24
			TIMER2_u8Init(Copy_psTimer);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <TIMER2_u8PWMGenerate+0x76>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    1dd2:	19 82       	std	Y+1, r1	; 0x01
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <TIMER2_u8PWMGenerate+0x76>
		}
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	08 95       	ret

00001df2 <TIMER2_u8Schedule>:


u8 TIMER2_u8Schedule(u16 Copy_u16msDelayTime,void(*Copy_pvFunc)(void),u8 Copy_u8Repeatability){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	6a 97       	sbiw	r28, 0x1a	; 26
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	9a 8b       	std	Y+18, r25	; 0x12
    1e08:	89 8b       	std	Y+17, r24	; 0x11
    1e0a:	7c 8b       	std	Y+20, r23	; 0x14
    1e0c:	6b 8b       	std	Y+19, r22	; 0x13
    1e0e:	4d 8b       	std	Y+21, r20	; 0x15
	u8 Local_u8ErrorState=OK; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	8b 87       	std	Y+11, r24	; 0x0b
    1e14:	1a 86       	std	Y+10, r1	; 0x0a
    1e16:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_pvFunc!=NULL){
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <TIMER2_u8Schedule+0x30>
    1e20:	6a c0       	rjmp	.+212    	; 0x1ef6 <TIMER2_u8Schedule+0x104>
		TIMER2_pvScheduleFunc=Copy_pvFunc;
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	90 93 a5 00 	sts	0x00A5, r25
    1e2a:	80 93 a4 00 	sts	0x00A4, r24
		TIMERS_pvCallBackFunc[INT_TIMER2_COMP]= (&TIMER2_voidScheduleFunc);
    1e2e:	8b ed       	ldi	r24, 0xDB	; 219
    1e30:	95 e0       	ldi	r25, 0x05	; 5
    1e32:	90 93 95 00 	sts	0x0095, r25
    1e36:	80 93 94 00 	sts	0x0094, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_ENABLE,INT_DISABLE};
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	0c 96       	adiw	r24, 0x0c	; 12
    1e3e:	9f 8b       	std	Y+23, r25	; 0x17
    1e40:	8e 8b       	std	Y+22, r24	; 0x16
    1e42:	ef e8       	ldi	r30, 0x8F	; 143
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	f9 8f       	std	Y+25, r31	; 0x19
    1e48:	e8 8f       	std	Y+24, r30	; 0x18
    1e4a:	f5 e0       	ldi	r31, 0x05	; 5
    1e4c:	fa 8f       	std	Y+26, r31	; 0x1a
    1e4e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1e50:	f9 8d       	ldd	r31, Y+25	; 0x19
    1e52:	00 80       	ld	r0, Z
    1e54:	88 8d       	ldd	r24, Y+24	; 0x18
    1e56:	99 8d       	ldd	r25, Y+25	; 0x19
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	99 8f       	std	Y+25, r25	; 0x19
    1e5c:	88 8f       	std	Y+24, r24	; 0x18
    1e5e:	ee 89       	ldd	r30, Y+22	; 0x16
    1e60:	ff 89       	ldd	r31, Y+23	; 0x17
    1e62:	00 82       	st	Z, r0
    1e64:	8e 89       	ldd	r24, Y+22	; 0x16
    1e66:	9f 89       	ldd	r25, Y+23	; 0x17
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	9f 8b       	std	Y+23, r25	; 0x17
    1e6c:	8e 8b       	std	Y+22, r24	; 0x16
    1e6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e70:	91 50       	subi	r25, 0x01	; 1
    1e72:	9a 8f       	std	Y+26, r25	; 0x1a
    1e74:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e76:	ee 23       	and	r30, r30
    1e78:	51 f7       	brne	.-44     	; 0x1e4e <TIMER2_u8Schedule+0x5c>
		TIMER_u8SetCompMatch(TIMER2,250);
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	6a ef       	ldi	r22, 0xFA	; 250
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16msDelayTime*1000UL;
    1e84:	89 89       	ldd	r24, Y+17	; 0x11
    1e86:	9a 89       	ldd	r25, Y+18	; 0x12
    1e88:	cc 01       	movw	r24, r24
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	28 ee       	ldi	r18, 0xE8	; 232
    1e90:	33 e0       	ldi	r19, 0x03	; 3
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__mulsi3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	af 83       	std	Y+7, r26	; 0x07
    1ea8:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	af 81       	ldd	r26, Y+7	; 0x07
    1eb0:	b8 85       	ldd	r27, Y+8	; 0x08
    1eb2:	2a ef       	ldi	r18, 0xFA	; 250
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodsi4>
    1ec2:	da 01       	movw	r26, r20
    1ec4:	c9 01       	movw	r24, r18
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	ab 83       	std	Y+3, r26	; 0x03
    1ecc:	bc 83       	std	Y+4, r27	; 0x04
		TIMER_u8ScheduleRepeatability=Copy_u8Repeatability;
    1ece:	8d 89       	ldd	r24, Y+21	; 0x15
    1ed0:	80 93 ae 00 	sts	0x00AE, r24
		TIMER_u32ScheduleCompMatchCount=Local_u32CompMatchCount;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eda:	bc 81       	ldd	r27, Y+4	; 0x04
    1edc:	80 93 aa 00 	sts	0x00AA, r24
    1ee0:	90 93 ab 00 	sts	0x00AB, r25
    1ee4:	a0 93 ac 00 	sts	0x00AC, r26
    1ee8:	b0 93 ad 00 	sts	0x00AD, r27
		TIMER2_u8Init(&Timer);
    1eec:	ce 01       	movw	r24, r28
    1eee:	0c 96       	adiw	r24, 0x0c	; 12
    1ef0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_u8Init>
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <TIMER2_u8Schedule+0x108>

	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return Local_u8ErrorState;
    1efa:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1efc:	6a 96       	adiw	r28, 0x1a	; 26
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <ICU_u8Init>:


/********************************************************ICU*************************************************************
 ************************************************************************************************************************/

u8 ICU_u8Init(u8 Copy_u8Edge,u8 Copy_u8InterruptStatus){
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <ICU_u8Init+0x6>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01

	//Input Capture Edge Select
	if(Copy_u8Edge==RISING_EDGE){
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	41 f4       	brne	.+16     	; 0x1f38 <ICU_u8Init+0x2a>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1f28:	ae e4       	ldi	r26, 0x4E	; 78
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ee e4       	ldi	r30, 0x4E	; 78
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 64       	ori	r24, 0x40	; 64
    1f34:	8c 93       	st	X, r24
    1f36:	0c c0       	rjmp	.+24     	; 0x1f50 <ICU_u8Init+0x42>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	88 23       	and	r24, r24
    1f3c:	41 f4       	brne	.+16     	; 0x1f4e <ICU_u8Init+0x40>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1f3e:	ae e4       	ldi	r26, 0x4E	; 78
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ee e4       	ldi	r30, 0x4E	; 78
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 7b       	andi	r24, 0xBF	; 191
    1f4a:	8c 93       	st	X, r24
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <ICU_u8Init+0x42>
	}
	else{
		Local_u8ErrorState=NOT_OK;
    1f4e:	19 82       	std	Y+1, r1	; 0x01
	}


	//Input Capture Interrupt
	if(Copy_u8InterruptStatus==INT_ENABLE){
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	41 f4       	brne	.+16     	; 0x1f66 <ICU_u8Init+0x58>
		SET_BIT(TIMSK,TIMSK_TICIE1);
    1f56:	a9 e5       	ldi	r26, 0x59	; 89
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 e5       	ldi	r30, 0x59	; 89
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 62       	ori	r24, 0x20	; 32
    1f62:	8c 93       	st	X, r24
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <ICU_u8Init+0x70>
	}
	else if(Copy_u8InterruptStatus==INT_DISABLE){
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	41 f4       	brne	.+16     	; 0x1f7c <ICU_u8Init+0x6e>
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    1f6c:	a9 e5       	ldi	r26, 0x59	; 89
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e9 e5       	ldi	r30, 0x59	; 89
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 7d       	andi	r24, 0xDF	; 223
    1f78:	8c 93       	st	X, r24
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <ICU_u8Init+0x70>
	}
	else{
		Local_u8ErrorState=NOT_OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <ICU_u8SetEdge>:

u8 ICU_u8SetEdge(u8 Copy_u8Edge){
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <ICU_u8SetEdge+0x6>
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge==RISING_EDGE){
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	41 f4       	brne	.+16     	; 0x1fb2 <ICU_u8SetEdge+0x26>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1fa2:	ae e4       	ldi	r26, 0x4E	; 78
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ee e4       	ldi	r30, 0x4E	; 78
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 64       	ori	r24, 0x40	; 64
    1fae:	8c 93       	st	X, r24
    1fb0:	0c c0       	rjmp	.+24     	; 0x1fca <ICU_u8SetEdge+0x3e>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	88 23       	and	r24, r24
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <ICU_u8SetEdge+0x3c>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1fb8:	ae e4       	ldi	r26, 0x4E	; 78
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	ee e4       	ldi	r30, 0x4E	; 78
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 7b       	andi	r24, 0xBF	; 191
    1fc4:	8c 93       	st	X, r24
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <ICU_u8SetEdge+0x3e>
	}
	else{
		Local_u8ErrorState=NOT_OK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void){
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1fde:	e6 e4       	ldi	r30, 0x46	; 70
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <TIMER_u8SetCallBack>:

/********************************************************ISRs************************************************************
 ************************************************************************************************************************/


u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <TIMER_u8SetCallBack+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <TIMER_u8SetCallBack+0x8>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	7c 83       	std	Y+4, r23	; 0x04
    1ffc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f0       	breq	.+26     	; 0x2024 <TIMER_u8SetCallBack+0x38>
		TIMERS_pvCallBackFunc[Copy_u8InterruptID]=Copy_pvCallBackFunc;
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	fc 01       	movw	r30, r24
    2016:	ec 56       	subi	r30, 0x6C	; 108
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <TIMER_u8SetCallBack+0x3c>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	2f 93       	push	r18
    2044:	3f 93       	push	r19
    2046:	4f 93       	push	r20
    2048:	5f 93       	push	r21
    204a:	6f 93       	push	r22
    204c:	7f 93       	push	r23
    204e:	8f 93       	push	r24
    2050:	9f 93       	push	r25
    2052:	af 93       	push	r26
    2054:	bf 93       	push	r27
    2056:	ef 93       	push	r30
    2058:	ff 93       	push	r31
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_COMP]!=NULL){
    2062:	80 91 94 00 	lds	r24, 0x0094
    2066:	90 91 95 00 	lds	r25, 0x0095
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	29 f0       	breq	.+10     	; 0x2078 <__vector_4+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_COMP]();
    206e:	e0 91 94 00 	lds	r30, 0x0094
    2072:	f0 91 95 00 	lds	r31, 0x0095
    2076:	09 95       	icall
	}
}
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	ff 91       	pop	r31
    207e:	ef 91       	pop	r30
    2080:	bf 91       	pop	r27
    2082:	af 91       	pop	r26
    2084:	9f 91       	pop	r25
    2086:	8f 91       	pop	r24
    2088:	7f 91       	pop	r23
    208a:	6f 91       	pop	r22
    208c:	5f 91       	pop	r21
    208e:	4f 91       	pop	r20
    2090:	3f 91       	pop	r19
    2092:	2f 91       	pop	r18
    2094:	0f 90       	pop	r0
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	0f 90       	pop	r0
    209a:	1f 90       	pop	r1
    209c:	18 95       	reti

0000209e <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	2f 93       	push	r18
    20aa:	3f 93       	push	r19
    20ac:	4f 93       	push	r20
    20ae:	5f 93       	push	r21
    20b0:	6f 93       	push	r22
    20b2:	7f 93       	push	r23
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25
    20b8:	af 93       	push	r26
    20ba:	bf 93       	push	r27
    20bc:	ef 93       	push	r30
    20be:	ff 93       	push	r31
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_OVF]!=NULL){
    20c8:	80 91 96 00 	lds	r24, 0x0096
    20cc:	90 91 97 00 	lds	r25, 0x0097
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	29 f0       	breq	.+10     	; 0x20de <__vector_5+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_OVF]();
    20d4:	e0 91 96 00 	lds	r30, 0x0096
    20d8:	f0 91 97 00 	lds	r31, 0x0097
    20dc:	09 95       	icall
	}
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]!=NULL){
    212e:	80 91 9c 00 	lds	r24, 0x009C
    2132:	90 91 9d 00 	lds	r25, 0x009D
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	29 f0       	breq	.+10     	; 0x2144 <__vector_6+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]();
    213a:	e0 91 9c 00 	lds	r30, 0x009C
    213e:	f0 91 9d 00 	lds	r31, 0x009D
    2142:	09 95       	icall
	}
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	7f 91       	pop	r23
    2156:	6f 91       	pop	r22
    2158:	5f 91       	pop	r21
    215a:	4f 91       	pop	r20
    215c:	3f 91       	pop	r19
    215e:	2f 91       	pop	r18
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	0f 90       	pop	r0
    2166:	1f 90       	pop	r1
    2168:	18 95       	reti

0000216a <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    216a:	1f 92       	push	r1
    216c:	0f 92       	push	r0
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	0f 92       	push	r0
    2172:	11 24       	eor	r1, r1
    2174:	2f 93       	push	r18
    2176:	3f 93       	push	r19
    2178:	4f 93       	push	r20
    217a:	5f 93       	push	r21
    217c:	6f 93       	push	r22
    217e:	7f 93       	push	r23
    2180:	8f 93       	push	r24
    2182:	9f 93       	push	r25
    2184:	af 93       	push	r26
    2186:	bf 93       	push	r27
    2188:	ef 93       	push	r30
    218a:	ff 93       	push	r31
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]!=NULL){
    2194:	80 91 9a 00 	lds	r24, 0x009A
    2198:	90 91 9b 00 	lds	r25, 0x009B
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	29 f0       	breq	.+10     	; 0x21aa <__vector_7+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]();
    21a0:	e0 91 9a 00 	lds	r30, 0x009A
    21a4:	f0 91 9b 00 	lds	r31, 0x009B
    21a8:	09 95       	icall
	}
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	ff 91       	pop	r31
    21b0:	ef 91       	pop	r30
    21b2:	bf 91       	pop	r27
    21b4:	af 91       	pop	r26
    21b6:	9f 91       	pop	r25
    21b8:	8f 91       	pop	r24
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1
    21ce:	18 95       	reti

000021d0 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	2f 93       	push	r18
    21dc:	3f 93       	push	r19
    21de:	4f 93       	push	r20
    21e0:	5f 93       	push	r21
    21e2:	6f 93       	push	r22
    21e4:	7f 93       	push	r23
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	af 93       	push	r26
    21ec:	bf 93       	push	r27
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]!=NULL){
    21fa:	80 91 98 00 	lds	r24, 0x0098
    21fe:	90 91 99 00 	lds	r25, 0x0099
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	29 f0       	breq	.+10     	; 0x2210 <__vector_8+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]();
    2206:	e0 91 98 00 	lds	r30, 0x0098
    220a:	f0 91 99 00 	lds	r31, 0x0099
    220e:	09 95       	icall
	}
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	ff 91       	pop	r31
    2216:	ef 91       	pop	r30
    2218:	bf 91       	pop	r27
    221a:	af 91       	pop	r26
    221c:	9f 91       	pop	r25
    221e:	8f 91       	pop	r24
    2220:	7f 91       	pop	r23
    2222:	6f 91       	pop	r22
    2224:	5f 91       	pop	r21
    2226:	4f 91       	pop	r20
    2228:	3f 91       	pop	r19
    222a:	2f 91       	pop	r18
    222c:	0f 90       	pop	r0
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	0f 90       	pop	r0
    2232:	1f 90       	pop	r1
    2234:	18 95       	reti

00002236 <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    2236:	1f 92       	push	r1
    2238:	0f 92       	push	r0
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	0f 92       	push	r0
    223e:	11 24       	eor	r1, r1
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_OVF]!=NULL){
    2260:	80 91 9e 00 	lds	r24, 0x009E
    2264:	90 91 9f 00 	lds	r25, 0x009F
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	29 f0       	breq	.+10     	; 0x2276 <__vector_9+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_OVF]();
    226c:	e0 91 9e 00 	lds	r30, 0x009E
    2270:	f0 91 9f 00 	lds	r31, 0x009F
    2274:	09 95       	icall
	}
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	ff 91       	pop	r31
    227c:	ef 91       	pop	r30
    227e:	bf 91       	pop	r27
    2280:	af 91       	pop	r26
    2282:	9f 91       	pop	r25
    2284:	8f 91       	pop	r24
    2286:	7f 91       	pop	r23
    2288:	6f 91       	pop	r22
    228a:	5f 91       	pop	r21
    228c:	4f 91       	pop	r20
    228e:	3f 91       	pop	r19
    2290:	2f 91       	pop	r18
    2292:	0f 90       	pop	r0
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	0f 90       	pop	r0
    2298:	1f 90       	pop	r1
    229a:	18 95       	reti

0000229c <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    229c:	1f 92       	push	r1
    229e:	0f 92       	push	r0
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	0f 92       	push	r0
    22a4:	11 24       	eor	r1, r1
    22a6:	2f 93       	push	r18
    22a8:	3f 93       	push	r19
    22aa:	4f 93       	push	r20
    22ac:	5f 93       	push	r21
    22ae:	6f 93       	push	r22
    22b0:	7f 93       	push	r23
    22b2:	8f 93       	push	r24
    22b4:	9f 93       	push	r25
    22b6:	af 93       	push	r26
    22b8:	bf 93       	push	r27
    22ba:	ef 93       	push	r30
    22bc:	ff 93       	push	r31
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_COMP]!=NULL){
    22c6:	80 91 a0 00 	lds	r24, 0x00A0
    22ca:	90 91 a1 00 	lds	r25, 0x00A1
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	29 f0       	breq	.+10     	; 0x22dc <__vector_10+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_COMP]();
    22d2:	e0 91 a0 00 	lds	r30, 0x00A0
    22d6:	f0 91 a1 00 	lds	r31, 0x00A1
    22da:	09 95       	icall
	}
}
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	ff 91       	pop	r31
    22e2:	ef 91       	pop	r30
    22e4:	bf 91       	pop	r27
    22e6:	af 91       	pop	r26
    22e8:	9f 91       	pop	r25
    22ea:	8f 91       	pop	r24
    22ec:	7f 91       	pop	r23
    22ee:	6f 91       	pop	r22
    22f0:	5f 91       	pop	r21
    22f2:	4f 91       	pop	r20
    22f4:	3f 91       	pop	r19
    22f6:	2f 91       	pop	r18
    22f8:	0f 90       	pop	r0
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	0f 90       	pop	r0
    22fe:	1f 90       	pop	r1
    2300:	18 95       	reti

00002302 <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    2302:	1f 92       	push	r1
    2304:	0f 92       	push	r0
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	0f 92       	push	r0
    230a:	11 24       	eor	r1, r1
    230c:	2f 93       	push	r18
    230e:	3f 93       	push	r19
    2310:	4f 93       	push	r20
    2312:	5f 93       	push	r21
    2314:	6f 93       	push	r22
    2316:	7f 93       	push	r23
    2318:	8f 93       	push	r24
    231a:	9f 93       	push	r25
    231c:	af 93       	push	r26
    231e:	bf 93       	push	r27
    2320:	ef 93       	push	r30
    2322:	ff 93       	push	r31
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_OVF]!=NULL){
    232c:	80 91 a2 00 	lds	r24, 0x00A2
    2330:	90 91 a3 00 	lds	r25, 0x00A3
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	29 f0       	breq	.+10     	; 0x2342 <__vector_11+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_OVF]();
    2338:	e0 91 a2 00 	lds	r30, 0x00A2
    233c:	f0 91 a3 00 	lds	r31, 0x00A3
    2340:	09 95       	icall
	}
}
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	ff 91       	pop	r31
    2348:	ef 91       	pop	r30
    234a:	bf 91       	pop	r27
    234c:	af 91       	pop	r26
    234e:	9f 91       	pop	r25
    2350:	8f 91       	pop	r24
    2352:	7f 91       	pop	r23
    2354:	6f 91       	pop	r22
    2356:	5f 91       	pop	r21
    2358:	4f 91       	pop	r20
    235a:	3f 91       	pop	r19
    235c:	2f 91       	pop	r18
    235e:	0f 90       	pop	r0
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	0f 90       	pop	r0
    2364:	1f 90       	pop	r1
    2366:	18 95       	reti

00002368 <ADC_voidInit>:

//variables for Asynchronous Chain Conversion
static Chain_t *ADC_psChain=NULL;
static u8 ADC_u8ChainIndex=0;

void ADC_voidInit(void){
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
#if REFERENCE_SELECTION==AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif REFERENCE_SELECTION==AVCC_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2370:	a7 e2       	ldi	r26, 0x27	; 39
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e7 e2       	ldi	r30, 0x27	; 39
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8f 77       	andi	r24, 0x7F	; 127
    237c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    237e:	a7 e2       	ldi	r26, 0x27	; 39
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e7 e2       	ldi	r30, 0x27	; 39
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	80 64       	ori	r24, 0x40	; 64
    238a:	8c 93       	st	X, r24

	//Adjust Resolution
#if ADC_RESOLUTION==10
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION==8
	SET_BIT(ADMUX,ADMUX_ADLAR);
    238c:	a7 e2       	ldi	r26, 0x27	; 39
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e7 e2       	ldi	r30, 0x27	; 39
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADSC);

#endif

#elif AUTO_TRIGGER==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
    239a:	a6 e2       	ldi	r26, 0x26	; 38
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e6 e2       	ldi	r30, 0x26	; 38
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 7d       	andi	r24, 0xDF	; 223
    23a6:	8c 93       	st	X, r24

	//Interrupt enable
#if ADC_INT==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif ADC_INT==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    23a8:	a6 e2       	ldi	r26, 0x26	; 38
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e6 e2       	ldi	r30, 0x26	; 38
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	87 7f       	andi	r24, 0xF7	; 247
    23b4:	8c 93       	st	X, r24
#else
#error "WRONG INT OPTION"
#endif

	//Prescaler Setting
	ADCSRA&=ADC_PRESCALER_MASK;
    23b6:	a6 e2       	ldi	r26, 0x26	; 38
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e6 e2       	ldi	r30, 0x26	; 38
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	88 7f       	andi	r24, 0xF8	; 248
    23c2:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER ;
    23c4:	a6 e2       	ldi	r26, 0x26	; 38
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e6 e2       	ldi	r30, 0x26	; 38
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	87 60       	ori	r24, 0x07	; 7
    23d0:	8c 93       	st	X, r24

	//Enable or Disable ADC
#if ADC_ENABLE==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    23d2:	a6 e2       	ldi	r26, 0x26	; 38
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e6 e2       	ldi	r30, 0x26	; 38
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	80 68       	ori	r24, 0x80	; 128
    23de:	8c 93       	st	X, r24
#elif ADC_ENABLE==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error "Wrong ADC_ENABLE Option"
#endif
}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16* Copy_pu16Reading){
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	29 97       	sbiw	r28, 0x09	; 9
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	78 87       	std	Y+8, r23	; 0x08
    23fe:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
    2400:	1a 82       	std	Y+2, r1	; 0x02
    2402:	1b 82       	std	Y+3, r1	; 0x03
    2404:	1c 82       	std	Y+4, r1	; 0x04
    2406:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState==IDLE)
    240c:	80 91 b3 00 	lds	r24, 0x00B3
    2410:	88 23       	and	r24, r24
    2412:	09 f0       	breq	.+2      	; 0x2416 <ADC_u8StartConversionSynch+0x30>
    2414:	44 c0       	rjmp	.+136    	; 0x249e <ADC_u8StartConversionSynch+0xb8>
	{
		if(Copy_pu16Reading==NULL){
    2416:	8f 81       	ldd	r24, Y+7	; 0x07
    2418:	98 85       	ldd	r25, Y+8	; 0x08
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	19 f4       	brne	.+6      	; 0x2424 <ADC_u8StartConversionSynch+0x3e>
			Local_u8ErrorState=NULL_PTR;
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <ADC_u8StartConversionSynch+0xbc>
		}
		else{
			ADC_u8BusyState=BUSY;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	80 93 b3 00 	sts	0x00B3, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
    242a:	a7 e2       	ldi	r26, 0x27	; 39
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e7 e2       	ldi	r30, 0x27	; 39
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	80 7e       	andi	r24, 0xE0	; 224
    2436:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
    2438:	a7 e2       	ldi	r26, 0x27	; 39
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e2       	ldi	r30, 0x27	; 39
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	90 81       	ld	r25, Z
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	89 2b       	or	r24, r25
    2446:	8c 93       	st	X, r24

			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2448:	a6 e2       	ldi	r26, 0x26	; 38
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e6 e2       	ldi	r30, 0x26	; 38
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 64       	ori	r24, 0x40	; 64
    2454:	8c 93       	st	X, r24

			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
    2456:	e6 e2       	ldi	r30, 0x26	; 38
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	20 81       	ld	r18, Z
				Local_u32Counter++;
			}
			//clearing the interrupt flag by writing 1
			if(Local_u32Counter==ADC_u32TIMEOUT){
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	ac 81       	ldd	r26, Y+4	; 0x04
    2462:	bd 81       	ldd	r27, Y+5	; 0x05
    2464:	80 35       	cpi	r24, 0x50	; 80
    2466:	23 ec       	ldi	r18, 0xC3	; 195
    2468:	92 07       	cpc	r25, r18
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	a2 07       	cpc	r26, r18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	b2 07       	cpc	r27, r18
    2472:	11 f4       	brne	.+4      	; 0x2478 <ADC_u8StartConversionSynch+0x92>
				//loop is broken because timeout is reached
				Local_u8ErrorState=NOT_OK;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	15 c0       	rjmp	.+42     	; 0x24a2 <ADC_u8StartConversionSynch+0xbc>
			}
			else{
				//flag is raised
				SET_BIT(ADCSRA,ADCSRA_ADIF);
    2478:	a6 e2       	ldi	r26, 0x26	; 38
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e6 e2       	ldi	r30, 0x26	; 38
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 61       	ori	r24, 0x10	; 16
    2484:	8c 93       	st	X, r24
				//returning the reading
#if ADC_RESOLUTION == 8
				*Copy_pu16Reading= ADCH;
    2486:	e5 e2       	ldi	r30, 0x25	; 37
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	ef 81       	ldd	r30, Y+7	; 0x07
    2492:	f8 85       	ldd	r31, Y+8	; 0x08
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
#elif ADC_RESOLUTION == 10
				*Copy_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
				ADC_u8BusyState=IDLE;
    2498:	10 92 b3 00 	sts	0x00B3, r1
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <ADC_u8StartConversionSynch+0xbc>
			}
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
    249e:	83 e0       	ldi	r24, 0x03	; 3
    24a0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a4:	29 96       	adiw	r28, 0x09	; 9
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading, void (*Copy_pvNotificationFunc)(void)){
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <ADC_u8StartConversionAsynch+0x6>
    24bc:	00 d0       	rcall	.+0      	; 0x24be <ADC_u8StartConversionAsynch+0x8>
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <ADC_u8StartConversionAsynch+0xa>
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	7c 83       	std	Y+4, r23	; 0x04
    24c8:	6b 83       	std	Y+3, r22	; 0x03
    24ca:	5e 83       	std	Y+6, r21	; 0x06
    24cc:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	89 83       	std	Y+1, r24	; 0x01

	if(ADC_u8BusyState==IDLE)
    24d2:	80 91 b3 00 	lds	r24, 0x00B3
    24d6:	88 23       	and	r24, r24
    24d8:	d1 f5       	brne	.+116    	; 0x254e <ADC_u8StartConversionAsynch+0x98>
	{
		ADC_u8BusyState=BUSY;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	80 93 b3 00 	sts	0x00B3, r24

		if(Copy_pu16Reading==NULL||Copy_pvNotificationFunc==NULL){
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	21 f0       	breq	.+8      	; 0x24f0 <ADC_u8StartConversionAsynch+0x3a>
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <ADC_u8StartConversionAsynch+0x40>

			Local_u8ErrorState=NULL_PTR;
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	2e c0       	rjmp	.+92     	; 0x2552 <ADC_u8StartConversionAsynch+0x9c>
		}
		else{
			ADC_u8ConversionMode=SINGLE;
    24f6:	10 92 b7 00 	sts	0x00B7, r1
			//put the local variables into global so they can be used in the ISR
			ADC_pu16Reading=Copy_pu16Reading;
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	90 93 b0 00 	sts	0x00B0, r25
    2502:	80 93 af 00 	sts	0x00AF, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	90 93 b2 00 	sts	0x00B2, r25
    250e:	80 93 b1 00 	sts	0x00B1, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
    2512:	a7 e2       	ldi	r26, 0x27	; 39
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e7 e2       	ldi	r30, 0x27	; 39
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	80 7e       	andi	r24, 0xE0	; 224
    251e:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
    2520:	a7 e2       	ldi	r26, 0x27	; 39
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e7 e2       	ldi	r30, 0x27	; 39
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	90 81       	ld	r25, Z
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	89 2b       	or	r24, r25
    252e:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2530:	a6 e2       	ldi	r26, 0x26	; 38
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e6 e2       	ldi	r30, 0x26	; 38
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	80 64       	ori	r24, 0x40	; 64
    253c:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    253e:	a6 e2       	ldi	r26, 0x26	; 38
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e6 e2       	ldi	r30, 0x26	; 38
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 60       	ori	r24, 0x08	; 8
    254a:	8c 93       	st	X, r24
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <ADC_u8StartConversionAsynch+0x9c>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2552:	89 81       	ldd	r24, Y+1	; 0x01
}
    2554:	26 96       	adiw	r28, 0x06	; 6
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <ADC_u8StartChainConversionAsynch>:

u8 ADC_u8StartChainConversionAsynch(Chain_t* Copy_psADCChain){
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <ADC_u8StartChainConversionAsynch+0x6>
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	9b 83       	std	Y+3, r25	; 0x03
    2574:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState==IDLE)
    257a:	80 91 b3 00 	lds	r24, 0x00B3
    257e:	88 23       	and	r24, r24
    2580:	09 f0       	breq	.+2      	; 0x2584 <ADC_u8StartChainConversionAsynch+0x1e>
    2582:	3e c0       	rjmp	.+124    	; 0x2600 <ADC_u8StartChainConversionAsynch+0x9a>
	{
		if(Copy_psADCChain==NULL){
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	19 f4       	brne	.+6      	; 0x2592 <ADC_u8StartChainConversionAsynch+0x2c>
			Local_u8ErrorState=NULL_PTR;
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	39 c0       	rjmp	.+114    	; 0x2604 <ADC_u8StartChainConversionAsynch+0x9e>
		}
		else{
			//make ADC busy
			ADC_u8BusyState=BUSY;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 b3 00 	sts	0x00B3, r24

			//make Conversion Mode Chain Conversion
			ADC_u8ConversionMode=CHAIN;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	80 93 b7 00 	sts	0x00B7, r24

			//put the local variables into global so they can be used in the ISR
			ADC_psChain=Copy_psADCChain;
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	90 93 b5 00 	sts	0x00B5, r25
    25a6:	80 93 b4 00 	sts	0x00B4, r24

			//adjusting the channel using bit masking
			ADC_u8ChainIndex=0;
    25aa:	10 92 b6 00 	sts	0x00B6, r1
			ADMUX&=CHANNEL_MUX_MASK;
    25ae:	a7 e2       	ldi	r26, 0x27	; 39
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e7 e2       	ldi	r30, 0x27	; 39
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 7e       	andi	r24, 0xE0	; 224
    25ba:	8c 93       	st	X, r24
			ADMUX|=Copy_psADCChain->ChannelArr[ADC_u8ChainIndex];
    25bc:	a7 e2       	ldi	r26, 0x27	; 39
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e7 e2       	ldi	r30, 0x27	; 39
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	40 81       	ld	r20, Z
    25c6:	ea 81       	ldd	r30, Y+2	; 0x02
    25c8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ca:	20 81       	ld	r18, Z
    25cc:	31 81       	ldd	r19, Z+1	; 0x01
    25ce:	80 91 b6 00 	lds	r24, 0x00B6
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	f9 01       	movw	r30, r18
    25d8:	e8 0f       	add	r30, r24
    25da:	f9 1f       	adc	r31, r25
    25dc:	80 81       	ld	r24, Z
    25de:	84 2b       	or	r24, r20
    25e0:	8c 93       	st	X, r24

			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    25e2:	a6 e2       	ldi	r26, 0x26	; 38
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e6 e2       	ldi	r30, 0x26	; 38
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	80 64       	ori	r24, 0x40	; 64
    25ee:	8c 93       	st	X, r24

			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    25f0:	a6 e2       	ldi	r26, 0x26	; 38
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e6 e2       	ldi	r30, 0x26	; 38
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	88 60       	ori	r24, 0x08	; 8
    25fc:	8c 93       	st	X, r24
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <ADC_u8StartChainConversionAsynch+0x9e>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <ADC_u8StartChainConversionSynch>:

u8 ADC_u8StartChainConversionSynch(Chain_t* Copy_psADCChain){
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <ADC_u8StartChainConversionSynch+0x6>
    2618:	00 d0       	rcall	.+0      	; 0x261a <ADC_u8StartChainConversionSynch+0x8>
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState=OK;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8a 83       	std	Y+2, r24	; 0x02

	if(ADC_u8BusyState==IDLE)
    2626:	80 91 b3 00 	lds	r24, 0x00B3
    262a:	88 23       	and	r24, r24
    262c:	89 f5       	brne	.+98     	; 0x2690 <ADC_u8StartChainConversionSynch+0x7e>
	{
		if(Copy_psADCChain!=NULL){
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	51 f1       	breq	.+84     	; 0x268a <ADC_u8StartChainConversionSynch+0x78>
			u8 Local_u8Iterator;
			for(Local_u8Iterator=0;Local_u8Iterator<Copy_psADCChain->Size;Local_u8Iterator++){
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	21 c0       	rjmp	.+66     	; 0x267c <ADC_u8StartChainConversionSynch+0x6a>
				ADC_u8StartConversionSynch(Copy_psADCChain->ChannelArr[Local_u8Iterator],Copy_psADCChain->ResultArr[Local_u8Iterator]);
    263a:	eb 81       	ldd	r30, Y+3	; 0x03
    263c:	fc 81       	ldd	r31, Y+4	; 0x04
    263e:	20 81       	ld	r18, Z
    2640:	31 81       	ldd	r19, Z+1	; 0x01
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	f9 01       	movw	r30, r18
    264a:	e8 0f       	add	r30, r24
    264c:	f9 1f       	adc	r31, r25
    264e:	40 81       	ld	r20, Z
    2650:	eb 81       	ldd	r30, Y+3	; 0x03
    2652:	fc 81       	ldd	r31, Y+4	; 0x04
    2654:	22 81       	ldd	r18, Z+2	; 0x02
    2656:	33 81       	ldd	r19, Z+3	; 0x03
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	f9 01       	movw	r30, r18
    2664:	e8 0f       	add	r30, r24
    2666:	f9 1f       	adc	r31, r25
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	9c 01       	movw	r18, r24
    266e:	84 2f       	mov	r24, r20
    2670:	b9 01       	movw	r22, r18
    2672:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <ADC_u8StartConversionSynch>

	if(ADC_u8BusyState==IDLE)
	{
		if(Copy_psADCChain!=NULL){
			u8 Local_u8Iterator;
			for(Local_u8Iterator=0;Local_u8Iterator<Copy_psADCChain->Size;Local_u8Iterator++){
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	8f 5f       	subi	r24, 0xFF	; 255
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	eb 81       	ldd	r30, Y+3	; 0x03
    267e:	fc 81       	ldd	r31, Y+4	; 0x04
    2680:	94 81       	ldd	r25, Z+4	; 0x04
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	89 17       	cp	r24, r25
    2686:	c8 f2       	brcs	.-78     	; 0x263a <ADC_u8StartChainConversionSynch+0x28>
    2688:	05 c0       	rjmp	.+10     	; 0x2694 <ADC_u8StartChainConversionSynch+0x82>
				ADC_u8StartConversionSynch(Copy_psADCChain->ChannelArr[Local_u8Iterator],Copy_psADCChain->ResultArr[Local_u8Iterator]);
			}
		}
		else{
			Local_u8ErrorState=NULL_PTR;
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	8a 83       	std	Y+2, r24	; 0x02
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <ADC_u8StartChainConversionSynch+0x82>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2694:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <__vector_16>:

void __vector_16(void)   __attribute__((signal));
void __vector_16(void){
    26a4:	1f 92       	push	r1
    26a6:	0f 92       	push	r0
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	0f 92       	push	r0
    26ac:	11 24       	eor	r1, r1
    26ae:	2f 93       	push	r18
    26b0:	3f 93       	push	r19
    26b2:	4f 93       	push	r20
    26b4:	5f 93       	push	r21
    26b6:	6f 93       	push	r22
    26b8:	7f 93       	push	r23
    26ba:	8f 93       	push	r24
    26bc:	9f 93       	push	r25
    26be:	af 93       	push	r26
    26c0:	bf 93       	push	r27
    26c2:	ef 93       	push	r30
    26c4:	ff 93       	push	r31
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ConversionMode==SINGLE){
    26ce:	80 91 b7 00 	lds	r24, 0x00B7
    26d2:	88 23       	and	r24, r24
    26d4:	d1 f4       	brne	.+52     	; 0x270a <__vector_16+0x66>
		//read result
#if ADC_RESOLUTION == 8
		*ADC_pu16Reading= ADCH;
    26d6:	a0 91 af 00 	lds	r26, 0x00AF
    26da:	b0 91 b0 00 	lds	r27, 0x00B0
    26de:	e5 e2       	ldi	r30, 0x25	; 37
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	8d 93       	st	X+, r24
    26ea:	9c 93       	st	X, r25
		*ADC_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
		//make the adc idle to work again
		ADC_u8BusyState=IDLE;
    26ec:	10 92 b3 00 	sts	0x00B3, r1
		//call the notification function
		ADC_pvCallBackNotificationFunc();
    26f0:	e0 91 b1 00 	lds	r30, 0x00B1
    26f4:	f0 91 b2 00 	lds	r31, 0x00B2
    26f8:	09 95       	icall
		//disable interrupt
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    26fa:	a6 e2       	ldi	r26, 0x26	; 38
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e6 e2       	ldi	r30, 0x26	; 38
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	87 7f       	andi	r24, 0xF7	; 247
    2706:	8c 93       	st	X, r24
    2708:	61 c0       	rjmp	.+194    	; 0x27cc <__vector_16+0x128>
	}
	else if(ADC_u8ConversionMode==CHAIN){
    270a:	80 91 b7 00 	lds	r24, 0x00B7
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	09 f0       	breq	.+2      	; 0x2714 <__vector_16+0x70>
    2712:	5c c0       	rjmp	.+184    	; 0x27cc <__vector_16+0x128>
#if ADC_RESOLUTION == 8
		ADC_psChain->ResultArr[ADC_u8ChainIndex]= ADCH;
    2714:	e0 91 b4 00 	lds	r30, 0x00B4
    2718:	f0 91 b5 00 	lds	r31, 0x00B5
    271c:	22 81       	ldd	r18, Z+2	; 0x02
    271e:	33 81       	ldd	r19, Z+3	; 0x03
    2720:	80 91 b6 00 	lds	r24, 0x00B6
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	d9 01       	movw	r26, r18
    272e:	a8 0f       	add	r26, r24
    2730:	b9 1f       	adc	r27, r25
    2732:	e5 e2       	ldi	r30, 0x25	; 37
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	9c 93       	st	X, r25
    2740:	8e 93       	st	-X, r24
		ADC_psChain->ResultArr[ADC_u8ChainIndex] = ADC;
#else
#error "WRONG RESOLUTION OPTION"
#endif
		//increment index
		ADC_u8ChainIndex++;
    2742:	80 91 b6 00 	lds	r24, 0x00B6
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	80 93 b6 00 	sts	0x00B6, r24

		if(ADC_u8ChainIndex==ADC_psChain->Size){
    274c:	e0 91 b4 00 	lds	r30, 0x00B4
    2750:	f0 91 b5 00 	lds	r31, 0x00B5
    2754:	94 81       	ldd	r25, Z+4	; 0x04
    2756:	80 91 b6 00 	lds	r24, 0x00B6
    275a:	98 17       	cp	r25, r24
    275c:	a1 f4       	brne	.+40     	; 0x2786 <__vector_16+0xe2>
			ADC_psChain->NotiFunc();
    275e:	e0 91 b4 00 	lds	r30, 0x00B4
    2762:	f0 91 b5 00 	lds	r31, 0x00B5
    2766:	05 80       	ldd	r0, Z+5	; 0x05
    2768:	f6 81       	ldd	r31, Z+6	; 0x06
    276a:	e0 2d       	mov	r30, r0
    276c:	09 95       	icall
			// chain index reset
			ADC_u8ChainIndex = 0;
    276e:	10 92 b6 00 	sts	0x00B6, r1
			//disable interrupt
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2772:	a6 e2       	ldi	r26, 0x26	; 38
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e6 e2       	ldi	r30, 0x26	; 38
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	87 7f       	andi	r24, 0xF7	; 247
    277e:	8c 93       	st	X, r24
			//make the adc idle to work again
			ADC_u8BusyState=IDLE;
    2780:	10 92 b3 00 	sts	0x00B3, r1
    2784:	23 c0       	rjmp	.+70     	; 0x27cc <__vector_16+0x128>
		}
		else{
			//store the result

			//set new channel and start next conversion
			ADMUX&=CHANNEL_MUX_MASK;
    2786:	a7 e2       	ldi	r26, 0x27	; 39
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e7 e2       	ldi	r30, 0x27	; 39
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 7e       	andi	r24, 0xE0	; 224
    2792:	8c 93       	st	X, r24
			ADMUX|=ADC_psChain->ChannelArr[ADC_u8ChainIndex];
    2794:	a7 e2       	ldi	r26, 0x27	; 39
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e7 e2       	ldi	r30, 0x27	; 39
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	40 81       	ld	r20, Z
    279e:	e0 91 b4 00 	lds	r30, 0x00B4
    27a2:	f0 91 b5 00 	lds	r31, 0x00B5
    27a6:	20 81       	ld	r18, Z
    27a8:	31 81       	ldd	r19, Z+1	; 0x01
    27aa:	80 91 b6 00 	lds	r24, 0x00B6
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	f9 01       	movw	r30, r18
    27b4:	e8 0f       	add	r30, r24
    27b6:	f9 1f       	adc	r31, r25
    27b8:	80 81       	ld	r24, Z
    27ba:	84 2b       	or	r24, r20
    27bc:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    27be:	a6 e2       	ldi	r26, 0x26	; 38
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e6 e2       	ldi	r30, 0x26	; 38
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	80 64       	ori	r24, 0x40	; 64
    27ca:	8c 93       	st	X, r24

		}
	}
}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	ff 91       	pop	r31
    27d2:	ef 91       	pop	r30
    27d4:	bf 91       	pop	r27
    27d6:	af 91       	pop	r26
    27d8:	9f 91       	pop	r25
    27da:	8f 91       	pop	r24
    27dc:	7f 91       	pop	r23
    27de:	6f 91       	pop	r22
    27e0:	5f 91       	pop	r21
    27e2:	4f 91       	pop	r20
    27e4:	3f 91       	pop	r19
    27e6:	2f 91       	pop	r18
    27e8:	0f 90       	pop	r0
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	0f 90       	pop	r0
    27ee:	1f 90       	pop	r1
    27f0:	18 95       	reti

000027f2 <GIE_voidEnable>:
#include "../../LIB/STD_TYPES.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    27fa:	af e5       	ldi	r26, 0x5F	; 95
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ef e5       	ldi	r30, 0x5F	; 95
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	8c 93       	st	X, r24
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <GIE_voidDisable>:

void GIE_voidDisable(void){
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    2816:	af e5       	ldi	r26, 0x5F	; 95
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e5       	ldi	r30, 0x5F	; 95
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8f 77       	andi	r24, 0x7F	; 127
    2822:	8c 93       	st	X, r24
}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <EXTI_voidInt0Init>:
/*Global Pointer to Function to hold INT0,INT2,INT3 ISR addresses*/
void (*EXTI_pvInt0Func)(void)=NULL;
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void){
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    2832:	a5 e5       	ldi	r26, 0x55	; 85
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e5 e5       	ldi	r30, 0x55	; 85
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8e 7f       	andi	r24, 0xFE	; 254
    283e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    2840:	a5 e5       	ldi	r26, 0x55	; 85
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e5 e5       	ldi	r30, 0x55	; 85
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	82 60       	ori	r24, 0x02	; 2
    284c:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"

#endif
	//peripheral interrupt enable
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    284e:	ab e5       	ldi	r26, 0x5B	; 91
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	eb e5       	ldi	r30, 0x5B	; 91
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 64       	ori	r24, 0x40	; 64
    285a:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE configuration option"
#endif
}
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void){
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    286a:	a5 e5       	ldi	r26, 0x55	; 85
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e5 e5       	ldi	r30, 0x55	; 85
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8b 7f       	andi	r24, 0xFB	; 251
    2876:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    2878:	a5 e5       	ldi	r26, 0x55	; 85
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e5 e5       	ldi	r30, 0x55	; 85
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	88 60       	ori	r24, 0x08	; 8
    2884:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);

#endif
	//peripheral interrupt enable
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    2886:	ab e5       	ldi	r26, 0x5B	; 91
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	eb e5       	ldi	r30, 0x5B	; 91
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	80 68       	ori	r24, 0x80	; 128
    2892:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE configuration option"

#endif
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void){
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	// Set sense control for int0

#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
#elif INT2_SENSE == RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_INT2);
    28a2:	a4 e5       	ldi	r26, 0x54	; 84
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e4 e5       	ldi	r30, 0x54	; 84
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	80 64       	ori	r24, 0x40	; 64
    28ae:	8c 93       	st	X, r24
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    28b0:	ab e5       	ldi	r26, 0x5B	; 91
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	eb e5       	ldi	r30, 0x5B	; 91
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	80 62       	ori	r24, 0x20	; 32
    28bc:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong INT2_INITIAL_STATE configuration option"
#endif
}
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <EXTI_u8Int0SetSenseControl>:

u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Interrupt, u8 Copy_u8Sense)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	27 97       	sbiw	r28, 0x07	; 7
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Interrupt==EXTI_INT0)
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <EXTI_u8Int0SetSenseControl+0x24>
    28e6:	5e c0       	rjmp	.+188    	; 0x29a4 <EXTI_u8Int0SetSenseControl+0xe0>
	{
		switch (Copy_u8Sense){
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3f 83       	std	Y+7, r19	; 0x07
    28f0:	2e 83       	std	Y+6, r18	; 0x06
    28f2:	8e 81       	ldd	r24, Y+6	; 0x06
    28f4:	9f 81       	ldd	r25, Y+7	; 0x07
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	91 05       	cpc	r25, r1
    28fa:	29 f1       	breq	.+74     	; 0x2946 <EXTI_u8Int0SetSenseControl+0x82>
    28fc:	2e 81       	ldd	r18, Y+6	; 0x06
    28fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2900:	23 30       	cpi	r18, 0x03	; 3
    2902:	31 05       	cpc	r19, r1
    2904:	34 f4       	brge	.+12     	; 0x2912 <EXTI_u8Int0SetSenseControl+0x4e>
    2906:	8e 81       	ldd	r24, Y+6	; 0x06
    2908:	9f 81       	ldd	r25, Y+7	; 0x07
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	91 05       	cpc	r25, r1
    290e:	61 f0       	breq	.+24     	; 0x2928 <EXTI_u8Int0SetSenseControl+0x64>
    2910:	47 c0       	rjmp	.+142    	; 0x29a0 <EXTI_u8Int0SetSenseControl+0xdc>
    2912:	2e 81       	ldd	r18, Y+6	; 0x06
    2914:	3f 81       	ldd	r19, Y+7	; 0x07
    2916:	23 30       	cpi	r18, 0x03	; 3
    2918:	31 05       	cpc	r19, r1
    291a:	21 f1       	breq	.+72     	; 0x2964 <EXTI_u8Int0SetSenseControl+0xa0>
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	9f 81       	ldd	r25, Y+7	; 0x07
    2920:	84 30       	cpi	r24, 0x04	; 4
    2922:	91 05       	cpc	r25, r1
    2924:	71 f1       	breq	.+92     	; 0x2982 <EXTI_u8Int0SetSenseControl+0xbe>
    2926:	3c c0       	rjmp	.+120    	; 0x29a0 <EXTI_u8Int0SetSenseControl+0xdc>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    2928:	a5 e5       	ldi	r26, 0x55	; 85
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e5 e5       	ldi	r30, 0x55	; 85
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8e 7f       	andi	r24, 0xFE	; 254
    2934:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    2936:	a5 e5       	ldi	r26, 0x55	; 85
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e5 e5       	ldi	r30, 0x55	; 85
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	8d 7f       	andi	r24, 0xFD	; 253
    2942:	8c 93       	st	X, r24
    2944:	ad c0       	rjmp	.+346    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    2946:	a5 e5       	ldi	r26, 0x55	; 85
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e5       	ldi	r30, 0x55	; 85
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    2954:	a5 e5       	ldi	r26, 0x55	; 85
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e5 e5       	ldi	r30, 0x55	; 85
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8d 7f       	andi	r24, 0xFD	; 253
    2960:	8c 93       	st	X, r24
    2962:	9e c0       	rjmp	.+316    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    2964:	a5 e5       	ldi	r26, 0x55	; 85
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e5 e5       	ldi	r30, 0x55	; 85
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	8e 7f       	andi	r24, 0xFE	; 254
    2970:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    2972:	a5 e5       	ldi	r26, 0x55	; 85
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e5 e5       	ldi	r30, 0x55	; 85
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	82 60       	ori	r24, 0x02	; 2
    297e:	8c 93       	st	X, r24
    2980:	8f c0       	rjmp	.+286    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    2982:	a5 e5       	ldi	r26, 0x55	; 85
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e5 e5       	ldi	r30, 0x55	; 85
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	81 60       	ori	r24, 0x01	; 1
    298e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    2990:	a5 e5       	ldi	r26, 0x55	; 85
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e5 e5       	ldi	r30, 0x55	; 85
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	82 60       	ori	r24, 0x02	; 2
    299c:	8c 93       	st	X, r24
    299e:	80 c0       	rjmp	.+256    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		default: Local_u8ErrorState=NOT_OK;
    29a0:	19 82       	std	Y+1, r1	; 0x01
    29a2:	7e c0       	rjmp	.+252    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	09 f0       	breq	.+2      	; 0x29ac <EXTI_u8Int0SetSenseControl+0xe8>
    29aa:	5e c0       	rjmp	.+188    	; 0x2a68 <EXTI_u8Int0SetSenseControl+0x1a4>
		switch (Copy_u8Sense){
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	3d 83       	std	Y+5, r19	; 0x05
    29b4:	2c 83       	std	Y+4, r18	; 0x04
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	82 30       	cpi	r24, 0x02	; 2
    29bc:	91 05       	cpc	r25, r1
    29be:	29 f1       	breq	.+74     	; 0x2a0a <EXTI_u8Int0SetSenseControl+0x146>
    29c0:	2c 81       	ldd	r18, Y+4	; 0x04
    29c2:	3d 81       	ldd	r19, Y+5	; 0x05
    29c4:	23 30       	cpi	r18, 0x03	; 3
    29c6:	31 05       	cpc	r19, r1
    29c8:	34 f4       	brge	.+12     	; 0x29d6 <EXTI_u8Int0SetSenseControl+0x112>
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	9d 81       	ldd	r25, Y+5	; 0x05
    29ce:	81 30       	cpi	r24, 0x01	; 1
    29d0:	91 05       	cpc	r25, r1
    29d2:	61 f0       	breq	.+24     	; 0x29ec <EXTI_u8Int0SetSenseControl+0x128>
    29d4:	47 c0       	rjmp	.+142    	; 0x2a64 <EXTI_u8Int0SetSenseControl+0x1a0>
    29d6:	2c 81       	ldd	r18, Y+4	; 0x04
    29d8:	3d 81       	ldd	r19, Y+5	; 0x05
    29da:	23 30       	cpi	r18, 0x03	; 3
    29dc:	31 05       	cpc	r19, r1
    29de:	21 f1       	breq	.+72     	; 0x2a28 <EXTI_u8Int0SetSenseControl+0x164>
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	9d 81       	ldd	r25, Y+5	; 0x05
    29e4:	84 30       	cpi	r24, 0x04	; 4
    29e6:	91 05       	cpc	r25, r1
    29e8:	71 f1       	breq	.+92     	; 0x2a46 <EXTI_u8Int0SetSenseControl+0x182>
    29ea:	3c c0       	rjmp	.+120    	; 0x2a64 <EXTI_u8Int0SetSenseControl+0x1a0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    29ec:	a5 e5       	ldi	r26, 0x55	; 85
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e5 e5       	ldi	r30, 0x55	; 85
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	8b 7f       	andi	r24, 0xFB	; 251
    29f8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    29fa:	a5 e5       	ldi	r26, 0x55	; 85
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e5 e5       	ldi	r30, 0x55	; 85
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	87 7f       	andi	r24, 0xF7	; 247
    2a06:	8c 93       	st	X, r24
    2a08:	4b c0       	rjmp	.+150    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    2a0a:	a5 e5       	ldi	r26, 0x55	; 85
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e5 e5       	ldi	r30, 0x55	; 85
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	84 60       	ori	r24, 0x04	; 4
    2a16:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    2a18:	a5 e5       	ldi	r26, 0x55	; 85
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e5 e5       	ldi	r30, 0x55	; 85
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	87 7f       	andi	r24, 0xF7	; 247
    2a24:	8c 93       	st	X, r24
    2a26:	3c c0       	rjmp	.+120    	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    2a28:	a5 e5       	ldi	r26, 0x55	; 85
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e5 e5       	ldi	r30, 0x55	; 85
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	8b 7f       	andi	r24, 0xFB	; 251
    2a34:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2a36:	a5 e5       	ldi	r26, 0x55	; 85
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e5 e5       	ldi	r30, 0x55	; 85
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	88 60       	ori	r24, 0x08	; 8
    2a42:	8c 93       	st	X, r24
    2a44:	2d c0       	rjmp	.+90     	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    2a46:	a5 e5       	ldi	r26, 0x55	; 85
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e5 e5       	ldi	r30, 0x55	; 85
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	84 60       	ori	r24, 0x04	; 4
    2a52:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2a54:	a5 e5       	ldi	r26, 0x55	; 85
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e5 e5       	ldi	r30, 0x55	; 85
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 60       	ori	r24, 0x08	; 8
    2a60:	8c 93       	st	X, r24
    2a62:	1e c0       	rjmp	.+60     	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
			break;
		default: Local_u8ErrorState=NOT_OK;
    2a64:	19 82       	std	Y+1, r1	; 0x01
    2a66:	1c c0       	rjmp	.+56     	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
		}

	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	83 30       	cpi	r24, 0x03	; 3
    2a6c:	c1 f4       	brne	.+48     	; 0x2a9e <EXTI_u8Int0SetSenseControl+0x1da>

		if(Copy_u8Sense==EXTI_FALLING_EDGE){
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	83 30       	cpi	r24, 0x03	; 3
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <EXTI_u8Int0SetSenseControl+0x1c0>
			CLR_BIT(MCUCSR,MCUCSR_INT2);
    2a74:	a4 e5       	ldi	r26, 0x54	; 84
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e4 e5       	ldi	r30, 0x54	; 84
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8f 7b       	andi	r24, 0xBF	; 191
    2a80:	8c 93       	st	X, r24
    2a82:	0e c0       	rjmp	.+28     	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
		}
		else if(Copy_u8Sense==EXTI_RISING_EDGE){
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	84 30       	cpi	r24, 0x04	; 4
    2a88:	41 f4       	brne	.+16     	; 0x2a9a <EXTI_u8Int0SetSenseControl+0x1d6>
			SET_BIT(MCUCSR,MCUCSR_INT2);
    2a8a:	a4 e5       	ldi	r26, 0x54	; 84
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e4 e5       	ldi	r30, 0x54	; 84
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	80 64       	ori	r24, 0x40	; 64
    2a96:	8c 93       	st	X, r24
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    2a9a:	19 82       	std	Y+1, r1	; 0x01
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <EXTI_u8Int0SetSenseControl+0x1dc>
		}
	}
	else{
		Local_u8ErrorState=NOT_OK;
    2a9e:	19 82       	std	Y+1, r1	; 0x01
	}



	return Local_u8ErrorState;
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa2:	27 96       	adiw	r28, 0x07	; 7
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <EXTI_u8SetInterruptStatus>:

u8 EXTI_u8SetInterruptStatus(u8 Copy_u8Interrupt, u8 Copy_u8Status){
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <EXTI_u8SetInterruptStatus+0x6>
    2aba:	0f 92       	push	r0
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
    2ac2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Interrupt==EXTI_INT0){
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	c1 f4       	brne	.+48     	; 0x2afe <EXTI_u8SetInterruptStatus+0x4a>
		if(Copy_u8Status==EXTI_ENABLE){
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	41 f4       	brne	.+16     	; 0x2ae4 <EXTI_u8SetInterruptStatus+0x30>
			SET_BIT(GICR,GICR_INT0);
    2ad4:	ab e5       	ldi	r26, 0x5B	; 91
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	eb e5       	ldi	r30, 0x5B	; 91
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	80 64       	ori	r24, 0x40	; 64
    2ae0:	8c 93       	st	X, r24
    2ae2:	44 c0       	rjmp	.+136    	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	41 f4       	brne	.+16     	; 0x2afa <EXTI_u8SetInterruptStatus+0x46>
			CLR_BIT(GICR,GICR_INT0);
    2aea:	ab e5       	ldi	r26, 0x5B	; 91
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	eb e5       	ldi	r30, 0x5B	; 91
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	8f 7b       	andi	r24, 0xBF	; 191
    2af6:	8c 93       	st	X, r24
    2af8:	39 c0       	rjmp	.+114    	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    2afa:	19 82       	std	Y+1, r1	; 0x01
    2afc:	37 c0       	rjmp	.+110    	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	c1 f4       	brne	.+48     	; 0x2b34 <EXTI_u8SetInterruptStatus+0x80>
		if(Copy_u8Status==EXTI_ENABLE){
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	81 30       	cpi	r24, 0x01	; 1
    2b08:	41 f4       	brne	.+16     	; 0x2b1a <EXTI_u8SetInterruptStatus+0x66>
			SET_BIT(GICR,GICR_INT1);
    2b0a:	ab e5       	ldi	r26, 0x5B	; 91
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	eb e5       	ldi	r30, 0x5B	; 91
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	8c 93       	st	X, r24
    2b18:	29 c0       	rjmp	.+82     	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	41 f4       	brne	.+16     	; 0x2b30 <EXTI_u8SetInterruptStatus+0x7c>
			CLR_BIT(GICR,GICR_INT1);
    2b20:	ab e5       	ldi	r26, 0x5B	; 91
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	eb e5       	ldi	r30, 0x5B	; 91
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 77       	andi	r24, 0x7F	; 127
    2b2c:	8c 93       	st	X, r24
    2b2e:	1e c0       	rjmp	.+60     	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	1c c0       	rjmp	.+56     	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	c1 f4       	brne	.+48     	; 0x2b6a <EXTI_u8SetInterruptStatus+0xb6>

		if(Copy_u8Status==EXTI_ENABLE){
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	41 f4       	brne	.+16     	; 0x2b50 <EXTI_u8SetInterruptStatus+0x9c>
			SET_BIT(GICR,GICR_INT2);
    2b40:	ab e5       	ldi	r26, 0x5B	; 91
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	eb e5       	ldi	r30, 0x5B	; 91
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 62       	ori	r24, 0x20	; 32
    2b4c:	8c 93       	st	X, r24
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	82 30       	cpi	r24, 0x02	; 2
    2b54:	41 f4       	brne	.+16     	; 0x2b66 <EXTI_u8SetInterruptStatus+0xb2>
			CLR_BIT(GICR,GICR_INT2);
    2b56:	ab e5       	ldi	r26, 0x5B	; 91
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	eb e5       	ldi	r30, 0x5B	; 91
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8f 7d       	andi	r24, 0xDF	; 223
    2b62:	8c 93       	st	X, r24
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
		else{
			Local_u8ErrorState=NOT_OK;
    2b66:	19 82       	std	Y+1, r1	; 0x01
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <EXTI_u8SetInterruptStatus+0xb8>
		}
	}
	else{
		Local_u8ErrorState=NOT_OK;
    2b6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void)){
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <EXTI_u8Int0SetCallBack+0x6>
    2b80:	0f 92       	push	r0
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	9b 83       	std	Y+3, r25	; 0x03
    2b88:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt0Func!=NULL){
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	39 f0       	breq	.+14     	; 0x2ba4 <EXTI_u8Int0SetCallBack+0x2a>
		EXTI_pvInt0Func=Copy_pvInt0Func;
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	90 93 b9 00 	sts	0x00B9, r25
    2b9e:	80 93 b8 00 	sts	0x00B8, r24
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <EXTI_u8Int0SetCallBack+0x2e>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void)){
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <EXTI_u8Int1SetCallBack+0x6>
    2bbc:	0f 92       	push	r0
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt1Func!=NULL){
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	39 f0       	breq	.+14     	; 0x2be0 <EXTI_u8Int1SetCallBack+0x2a>
		EXTI_pvInt1Func=Copy_pvInt1Func;
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd6:	90 93 bb 00 	sts	0x00BB, r25
    2bda:	80 93 ba 00 	sts	0x00BA, r24
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <EXTI_u8Int1SetCallBack+0x2e>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void)){
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <EXTI_u8Int2SetCallBack+0x6>
    2bf8:	0f 92       	push	r0
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9b 83       	std	Y+3, r25	; 0x03
    2c00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt2Func!=NULL){
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	39 f0       	breq	.+14     	; 0x2c1c <EXTI_u8Int2SetCallBack+0x2a>
		EXTI_pvInt2Func=Copy_pvInt2Func;
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	90 93 bd 00 	sts	0x00BD, r25
    2c16:	80 93 bc 00 	sts	0x00BC, r24
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <EXTI_u8Int2SetCallBack+0x2e>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <__vector_1>:

/*ISR For INT0*/
void __vector_1(void)    __attribute__((signal));
void __vector_1(void){
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	2f 93       	push	r18
    2c3a:	3f 93       	push	r19
    2c3c:	4f 93       	push	r20
    2c3e:	5f 93       	push	r21
    2c40:	6f 93       	push	r22
    2c42:	7f 93       	push	r23
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	af 93       	push	r26
    2c4a:	bf 93       	push	r27
    2c4c:	ef 93       	push	r30
    2c4e:	ff 93       	push	r31
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL){
    2c58:	80 91 b8 00 	lds	r24, 0x00B8
    2c5c:	90 91 b9 00 	lds	r25, 0x00B9
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	29 f0       	breq	.+10     	; 0x2c6e <__vector_1+0x40>
		EXTI_pvInt0Func();
    2c64:	e0 91 b8 00 	lds	r30, 0x00B8
    2c68:	f0 91 b9 00 	lds	r31, 0x00B9
    2c6c:	09 95       	icall
	}
}
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	bf 91       	pop	r27
    2c78:	af 91       	pop	r26
    2c7a:	9f 91       	pop	r25
    2c7c:	8f 91       	pop	r24
    2c7e:	7f 91       	pop	r23
    2c80:	6f 91       	pop	r22
    2c82:	5f 91       	pop	r21
    2c84:	4f 91       	pop	r20
    2c86:	3f 91       	pop	r19
    2c88:	2f 91       	pop	r18
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	0f 90       	pop	r0
    2c90:	1f 90       	pop	r1
    2c92:	18 95       	reti

00002c94 <__vector_2>:

void __vector_2(void)    __attribute__((signal));
void __vector_2(void){
    2c94:	1f 92       	push	r1
    2c96:	0f 92       	push	r0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	0f 92       	push	r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	2f 93       	push	r18
    2ca0:	3f 93       	push	r19
    2ca2:	4f 93       	push	r20
    2ca4:	5f 93       	push	r21
    2ca6:	6f 93       	push	r22
    2ca8:	7f 93       	push	r23
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	af 93       	push	r26
    2cb0:	bf 93       	push	r27
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL){
    2cbe:	80 91 ba 00 	lds	r24, 0x00BA
    2cc2:	90 91 bb 00 	lds	r25, 0x00BB
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <__vector_2+0x40>
		EXTI_pvInt1Func();
    2cca:	e0 91 ba 00 	lds	r30, 0x00BA
    2cce:	f0 91 bb 00 	lds	r31, 0x00BB
    2cd2:	09 95       	icall
	}
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	ff 91       	pop	r31
    2cda:	ef 91       	pop	r30
    2cdc:	bf 91       	pop	r27
    2cde:	af 91       	pop	r26
    2ce0:	9f 91       	pop	r25
    2ce2:	8f 91       	pop	r24
    2ce4:	7f 91       	pop	r23
    2ce6:	6f 91       	pop	r22
    2ce8:	5f 91       	pop	r21
    2cea:	4f 91       	pop	r20
    2cec:	3f 91       	pop	r19
    2cee:	2f 91       	pop	r18
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <__vector_3>:

void __vector_3(void)    __attribute__((signal));
void __vector_3(void){
    2cfa:	1f 92       	push	r1
    2cfc:	0f 92       	push	r0
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	0f 92       	push	r0
    2d02:	11 24       	eor	r1, r1
    2d04:	2f 93       	push	r18
    2d06:	3f 93       	push	r19
    2d08:	4f 93       	push	r20
    2d0a:	5f 93       	push	r21
    2d0c:	6f 93       	push	r22
    2d0e:	7f 93       	push	r23
    2d10:	8f 93       	push	r24
    2d12:	9f 93       	push	r25
    2d14:	af 93       	push	r26
    2d16:	bf 93       	push	r27
    2d18:	ef 93       	push	r30
    2d1a:	ff 93       	push	r31
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL){
    2d24:	80 91 bc 00 	lds	r24, 0x00BC
    2d28:	90 91 bd 00 	lds	r25, 0x00BD
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	29 f0       	breq	.+10     	; 0x2d3a <__vector_3+0x40>
		EXTI_pvInt2Func();
    2d30:	e0 91 bc 00 	lds	r30, 0x00BC
    2d34:	f0 91 bd 00 	lds	r31, 0x00BD
    2d38:	09 95       	icall
	}
}
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	ff 91       	pop	r31
    2d40:	ef 91       	pop	r30
    2d42:	bf 91       	pop	r27
    2d44:	af 91       	pop	r26
    2d46:	9f 91       	pop	r25
    2d48:	8f 91       	pop	r24
    2d4a:	7f 91       	pop	r23
    2d4c:	6f 91       	pop	r22
    2d4e:	5f 91       	pop	r21
    2d50:	4f 91       	pop	r20
    2d52:	3f 91       	pop	r19
    2d54:	2f 91       	pop	r18
    2d56:	0f 90       	pop	r0
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	0f 90       	pop	r0
    2d5c:	1f 90       	pop	r1
    2d5e:	18 95       	reti

00002d60 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_config.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    2d68:	ea e3       	ldi	r30, 0x3A	; 58
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    2d6e:	e7 e3       	ldi	r30, 0x37	; 55
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    2d74:	e4 e3       	ldi	r30, 0x34	; 52
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    2d7a:	e1 e3       	ldi	r30, 0x31	; 49
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	10 82       	st	Z, r1

	PORTA = PORTA_INITIAL_VALUE;
    2d80:	eb e3       	ldi	r30, 0x3B	; 59
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2d86:	e8 e3       	ldi	r30, 0x38	; 56
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    2d8c:	e5 e3       	ldi	r30, 0x35	; 53
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2d92:	e2 e3       	ldi	r30, 0x32	; 50
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	10 82       	st	Z, r1
}
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <DIO_u8SetPinValue>:
/*                            DIO_u8PIN4, DIO_u8PIN5, DIO_u8PIN6, DIO_u8PIN7}                   */
/* Fun. Argument3: Copy_u8Value {DIO_u8PIN_LOW, DIO_u8PIN_HIGH}                                 */
/* Fun. Return : u8                                                                             */
/************************************************************************************************/
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	28 97       	sbiw	r28, 0x08	; 8
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	8a 83       	std	Y+2, r24	; 0x02
    2db4:	6b 83       	std	Y+3, r22	; 0x03
    2db6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState = 0;
    2db8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Pin <= DIO_u8PIN7)
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	88 30       	cpi	r24, 0x08	; 8
    2dbe:	08 f0       	brcs	.+2      	; 0x2dc2 <DIO_u8SetPinValue+0x24>
    2dc0:	f4 c0       	rjmp	.+488    	; 0x2faa <DIO_u8SetPinValue+0x20c>
    {
        if (Copy_u8Value == DIO_u8PIN_LOW)
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <DIO_u8SetPinValue+0x2c>
    2dc8:	77 c0       	rjmp	.+238    	; 0x2eb8 <DIO_u8SetPinValue+0x11a>
        {
            switch (Copy_u8Port)
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	38 87       	std	Y+8, r19	; 0x08
    2dd2:	2f 83       	std	Y+7, r18	; 0x07
    2dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd6:	98 85       	ldd	r25, Y+8	; 0x08
    2dd8:	81 30       	cpi	r24, 0x01	; 1
    2dda:	91 05       	cpc	r25, r1
    2ddc:	59 f1       	breq	.+86     	; 0x2e34 <DIO_u8SetPinValue+0x96>
    2dde:	2f 81       	ldd	r18, Y+7	; 0x07
    2de0:	38 85       	ldd	r19, Y+8	; 0x08
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	31 05       	cpc	r19, r1
    2de6:	2c f4       	brge	.+10     	; 0x2df2 <DIO_u8SetPinValue+0x54>
    2de8:	8f 81       	ldd	r24, Y+7	; 0x07
    2dea:	98 85       	ldd	r25, Y+8	; 0x08
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f0       	breq	.+26     	; 0x2e0a <DIO_u8SetPinValue+0x6c>
    2df0:	60 c0       	rjmp	.+192    	; 0x2eb2 <DIO_u8SetPinValue+0x114>
    2df2:	2f 81       	ldd	r18, Y+7	; 0x07
    2df4:	38 85       	ldd	r19, Y+8	; 0x08
    2df6:	22 30       	cpi	r18, 0x02	; 2
    2df8:	31 05       	cpc	r19, r1
    2dfa:	89 f1       	breq	.+98     	; 0x2e5e <DIO_u8SetPinValue+0xc0>
    2dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dfe:	98 85       	ldd	r25, Y+8	; 0x08
    2e00:	83 30       	cpi	r24, 0x03	; 3
    2e02:	91 05       	cpc	r25, r1
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <DIO_u8SetPinValue+0x6a>
    2e06:	40 c0       	rjmp	.+128    	; 0x2e88 <DIO_u8SetPinValue+0xea>
    2e08:	54 c0       	rjmp	.+168    	; 0x2eb2 <DIO_u8SetPinValue+0x114>
            {
            case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    2e0a:	ab e3       	ldi	r26, 0x3B	; 59
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	eb e3       	ldi	r30, 0x3B	; 59
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	48 2f       	mov	r20, r24
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	02 2e       	mov	r0, r18
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <DIO_u8SetPinValue+0x8a>
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	0a 94       	dec	r0
    2e2a:	e2 f7       	brpl	.-8      	; 0x2e24 <DIO_u8SetPinValue+0x86>
    2e2c:	80 95       	com	r24
    2e2e:	84 23       	and	r24, r20
    2e30:	8c 93       	st	X, r24
    2e32:	bd c0       	rjmp	.+378    	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
    2e34:	a8 e3       	ldi	r26, 0x38	; 56
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e8 e3       	ldi	r30, 0x38	; 56
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	48 2f       	mov	r20, r24
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	02 2e       	mov	r0, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_u8SetPinValue+0xb4>
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	0a 94       	dec	r0
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_u8SetPinValue+0xb0>
    2e56:	80 95       	com	r24
    2e58:	84 23       	and	r24, r20
    2e5a:	8c 93       	st	X, r24
    2e5c:	a8 c0       	rjmp	.+336    	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    2e5e:	a5 e3       	ldi	r26, 0x35	; 53
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e5 e3       	ldi	r30, 0x35	; 53
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	48 2f       	mov	r20, r24
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	02 2e       	mov	r0, r18
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <DIO_u8SetPinValue+0xde>
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	0a 94       	dec	r0
    2e7e:	e2 f7       	brpl	.-8      	; 0x2e78 <DIO_u8SetPinValue+0xda>
    2e80:	80 95       	com	r24
    2e82:	84 23       	and	r24, r20
    2e84:	8c 93       	st	X, r24
    2e86:	93 c0       	rjmp	.+294    	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    2e88:	a2 e3       	ldi	r26, 0x32	; 50
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e2 e3       	ldi	r30, 0x32	; 50
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	48 2f       	mov	r20, r24
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	02 2e       	mov	r0, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <DIO_u8SetPinValue+0x108>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	0a 94       	dec	r0
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <DIO_u8SetPinValue+0x104>
    2eaa:	80 95       	com	r24
    2eac:	84 23       	and	r24, r20
    2eae:	8c 93       	st	X, r24
    2eb0:	7e c0       	rjmp	.+252    	; 0x2fae <DIO_u8SetPinValue+0x210>
            default: Local_u8ErrorState = 1; break;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	7b c0       	rjmp	.+246    	; 0x2fae <DIO_u8SetPinValue+0x210>
            }
        }
        else if (Copy_u8Value == DIO_u8PIN_HIGH)
    2eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <DIO_u8SetPinValue+0x122>
    2ebe:	72 c0       	rjmp	.+228    	; 0x2fa4 <DIO_u8SetPinValue+0x206>
        {
            switch (Copy_u8Port)
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	3e 83       	std	Y+6, r19	; 0x06
    2ec8:	2d 83       	std	Y+5, r18	; 0x05
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	49 f1       	breq	.+82     	; 0x2f26 <DIO_u8SetPinValue+0x188>
    2ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	2c f4       	brge	.+10     	; 0x2ee8 <DIO_u8SetPinValue+0x14a>
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	61 f0       	breq	.+24     	; 0x2efe <DIO_u8SetPinValue+0x160>
    2ee6:	5b c0       	rjmp	.+182    	; 0x2f9e <DIO_u8SetPinValue+0x200>
    2ee8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eea:	3e 81       	ldd	r19, Y+6	; 0x06
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	71 f1       	breq	.+92     	; 0x2f4e <DIO_u8SetPinValue+0x1b0>
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	83 30       	cpi	r24, 0x03	; 3
    2ef8:	91 05       	cpc	r25, r1
    2efa:	e9 f1       	breq	.+122    	; 0x2f76 <DIO_u8SetPinValue+0x1d8>
    2efc:	50 c0       	rjmp	.+160    	; 0x2f9e <DIO_u8SetPinValue+0x200>
            {
            case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    2efe:	ab e3       	ldi	r26, 0x3B	; 59
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	eb e3       	ldi	r30, 0x3B	; 59
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	48 2f       	mov	r20, r24
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	02 2e       	mov	r0, r18
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <DIO_u8SetPinValue+0x17e>
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	0a 94       	dec	r0
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <DIO_u8SetPinValue+0x17a>
    2f20:	84 2b       	or	r24, r20
    2f22:	8c 93       	st	X, r24
    2f24:	44 c0       	rjmp	.+136    	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
    2f26:	a8 e3       	ldi	r26, 0x38	; 56
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e8 e3       	ldi	r30, 0x38	; 56
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	48 2f       	mov	r20, r24
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	02 2e       	mov	r0, r18
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <DIO_u8SetPinValue+0x1a6>
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	0a 94       	dec	r0
    2f46:	e2 f7       	brpl	.-8      	; 0x2f40 <DIO_u8SetPinValue+0x1a2>
    2f48:	84 2b       	or	r24, r20
    2f4a:	8c 93       	st	X, r24
    2f4c:	30 c0       	rjmp	.+96     	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    2f4e:	a5 e3       	ldi	r26, 0x35	; 53
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e5 e3       	ldi	r30, 0x35	; 53
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	48 2f       	mov	r20, r24
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 2e       	mov	r0, r18
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <DIO_u8SetPinValue+0x1ce>
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	0a 94       	dec	r0
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <DIO_u8SetPinValue+0x1ca>
    2f70:	84 2b       	or	r24, r20
    2f72:	8c 93       	st	X, r24
    2f74:	1c c0       	rjmp	.+56     	; 0x2fae <DIO_u8SetPinValue+0x210>
            case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    2f76:	a2 e3       	ldi	r26, 0x32	; 50
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e2 e3       	ldi	r30, 0x32	; 50
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	48 2f       	mov	r20, r24
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	02 2e       	mov	r0, r18
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <DIO_u8SetPinValue+0x1f6>
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	0a 94       	dec	r0
    2f96:	e2 f7       	brpl	.-8      	; 0x2f90 <DIO_u8SetPinValue+0x1f2>
    2f98:	84 2b       	or	r24, r20
    2f9a:	8c 93       	st	X, r24
    2f9c:	08 c0       	rjmp	.+16     	; 0x2fae <DIO_u8SetPinValue+0x210>
            default: Local_u8ErrorState = 1; break;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	05 c0       	rjmp	.+10     	; 0x2fae <DIO_u8SetPinValue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <DIO_u8SetPinValue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb0:	28 96       	adiw	r28, 0x08	; 8
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <DIO_u8SetPORTValue>:
/* Fun. Argument1: Copy_u8Port {DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD}             */
/* Fun. Argument2: Copy_u8Direction {DIO_u8PORT_LOW, DIO_u8PORT_HIGH}                           */
/* Fun. Return : u8                                                                             */
/************************************************************************************************/
u8 DIO_u8SetPORTValue(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <DIO_u8SetPORTValue+0x6>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <DIO_u8SetPORTValue+0x8>
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
    2fd2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = 0;
    2fd4:	19 82       	std	Y+1, r1	; 0x01
    switch (Copy_u8Port)
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	3d 83       	std	Y+5, r19	; 0x05
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	d1 f0       	breq	.+52     	; 0x301e <DIO_u8SetPORTValue+0x5c>
    2fea:	2c 81       	ldd	r18, Y+4	; 0x04
    2fec:	3d 81       	ldd	r19, Y+5	; 0x05
    2fee:	22 30       	cpi	r18, 0x02	; 2
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <DIO_u8SetPORTValue+0x3c>
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	61 f0       	breq	.+24     	; 0x3014 <DIO_u8SetPORTValue+0x52>
    2ffc:	1f c0       	rjmp	.+62     	; 0x303c <DIO_u8SetPORTValue+0x7a>
    2ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    3000:	3d 81       	ldd	r19, Y+5	; 0x05
    3002:	22 30       	cpi	r18, 0x02	; 2
    3004:	31 05       	cpc	r19, r1
    3006:	81 f0       	breq	.+32     	; 0x3028 <DIO_u8SetPORTValue+0x66>
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	83 30       	cpi	r24, 0x03	; 3
    300e:	91 05       	cpc	r25, r1
    3010:	81 f0       	breq	.+32     	; 0x3032 <DIO_u8SetPORTValue+0x70>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <DIO_u8SetPORTValue+0x7a>
    {
    case DIO_u8PORTA: PORTA = Copy_u8Direction; break;
    3014:	eb e3       	ldi	r30, 0x3B	; 59
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	80 83       	st	Z, r24
    301c:	11 c0       	rjmp	.+34     	; 0x3040 <DIO_u8SetPORTValue+0x7e>
    case DIO_u8PORTB: PORTB = Copy_u8Direction; break;
    301e:	e8 e3       	ldi	r30, 0x38	; 56
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	80 83       	st	Z, r24
    3026:	0c c0       	rjmp	.+24     	; 0x3040 <DIO_u8SetPORTValue+0x7e>
    case DIO_u8PORTC: PORTC = Copy_u8Direction; break;
    3028:	e5 e3       	ldi	r30, 0x35	; 53
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	80 83       	st	Z, r24
    3030:	07 c0       	rjmp	.+14     	; 0x3040 <DIO_u8SetPORTValue+0x7e>
    case DIO_u8PORTD: PORTD = Copy_u8Direction; break;
    3032:	e2 e3       	ldi	r30, 0x32	; 50
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	80 83       	st	Z, r24
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <DIO_u8SetPORTValue+0x7e>
    default: Local_u8ErrorState = 1; break;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    3040:	89 81       	ldd	r24, Y+1	; 0x01
}
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <DIO_u8GetPinValue>:
/*                            DIO_u8PIN4, DIO_u8PIN5, DIO_u8PIN6, DIO_u8PIN7}                   */
/* Fun. Argument3: Copy_pu8Value pointer to store the value of the pin                          */
/* Fun. Return : u8                                                                             */
/************************************************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	27 97       	sbiw	r28, 0x07	; 7
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	8a 83       	std	Y+2, r24	; 0x02
    3068:	6b 83       	std	Y+3, r22	; 0x03
    306a:	5d 83       	std	Y+5, r21	; 0x05
    306c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState = 0;
    306e:	19 82       	std	Y+1, r1	; 0x01

    if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    3070:	8c 81       	ldd	r24, Y+4	; 0x04
    3072:	9d 81       	ldd	r25, Y+5	; 0x05
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	09 f4       	brne	.+2      	; 0x307a <DIO_u8GetPinValue+0x28>
    3078:	76 c0       	rjmp	.+236    	; 0x3166 <DIO_u8GetPinValue+0x114>
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	88 30       	cpi	r24, 0x08	; 8
    307e:	08 f0       	brcs	.+2      	; 0x3082 <DIO_u8GetPinValue+0x30>
    3080:	72 c0       	rjmp	.+228    	; 0x3166 <DIO_u8GetPinValue+0x114>
    {
        switch (Copy_u8Port)
    3082:	8a 81       	ldd	r24, Y+2	; 0x02
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	3f 83       	std	Y+7, r19	; 0x07
    308a:	2e 83       	std	Y+6, r18	; 0x06
    308c:	8e 81       	ldd	r24, Y+6	; 0x06
    308e:	9f 81       	ldd	r25, Y+7	; 0x07
    3090:	81 30       	cpi	r24, 0x01	; 1
    3092:	91 05       	cpc	r25, r1
    3094:	49 f1       	breq	.+82     	; 0x30e8 <DIO_u8GetPinValue+0x96>
    3096:	2e 81       	ldd	r18, Y+6	; 0x06
    3098:	3f 81       	ldd	r19, Y+7	; 0x07
    309a:	22 30       	cpi	r18, 0x02	; 2
    309c:	31 05       	cpc	r19, r1
    309e:	2c f4       	brge	.+10     	; 0x30aa <DIO_u8GetPinValue+0x58>
    30a0:	8e 81       	ldd	r24, Y+6	; 0x06
    30a2:	9f 81       	ldd	r25, Y+7	; 0x07
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	61 f0       	breq	.+24     	; 0x30c0 <DIO_u8GetPinValue+0x6e>
    30a8:	5b c0       	rjmp	.+182    	; 0x3160 <DIO_u8GetPinValue+0x10e>
    30aa:	2e 81       	ldd	r18, Y+6	; 0x06
    30ac:	3f 81       	ldd	r19, Y+7	; 0x07
    30ae:	22 30       	cpi	r18, 0x02	; 2
    30b0:	31 05       	cpc	r19, r1
    30b2:	71 f1       	breq	.+92     	; 0x3110 <DIO_u8GetPinValue+0xbe>
    30b4:	8e 81       	ldd	r24, Y+6	; 0x06
    30b6:	9f 81       	ldd	r25, Y+7	; 0x07
    30b8:	83 30       	cpi	r24, 0x03	; 3
    30ba:	91 05       	cpc	r25, r1
    30bc:	e9 f1       	breq	.+122    	; 0x3138 <DIO_u8GetPinValue+0xe6>
    30be:	50 c0       	rjmp	.+160    	; 0x3160 <DIO_u8GetPinValue+0x10e>
        {
        case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    30c0:	e9 e3       	ldi	r30, 0x39	; 57
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	48 2f       	mov	r20, r24
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	02 2e       	mov	r0, r18
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <DIO_u8GetPinValue+0x88>
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	0a 94       	dec	r0
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <DIO_u8GetPinValue+0x84>
    30de:	84 23       	and	r24, r20
    30e0:	ec 81       	ldd	r30, Y+4	; 0x04
    30e2:	fd 81       	ldd	r31, Y+5	; 0x05
    30e4:	80 83       	st	Z, r24
    30e6:	41 c0       	rjmp	.+130    	; 0x316a <DIO_u8GetPinValue+0x118>
        case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    30e8:	e6 e3       	ldi	r30, 0x36	; 54
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	48 2f       	mov	r20, r24
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	02 2e       	mov	r0, r18
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <DIO_u8GetPinValue+0xb0>
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	0a 94       	dec	r0
    3104:	e2 f7       	brpl	.-8      	; 0x30fe <DIO_u8GetPinValue+0xac>
    3106:	84 23       	and	r24, r20
    3108:	ec 81       	ldd	r30, Y+4	; 0x04
    310a:	fd 81       	ldd	r31, Y+5	; 0x05
    310c:	80 83       	st	Z, r24
    310e:	2d c0       	rjmp	.+90     	; 0x316a <DIO_u8GetPinValue+0x118>
        case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    3110:	e3 e3       	ldi	r30, 0x33	; 51
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	48 2f       	mov	r20, r24
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	02 2e       	mov	r0, r18
    3124:	02 c0       	rjmp	.+4      	; 0x312a <DIO_u8GetPinValue+0xd8>
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	0a 94       	dec	r0
    312c:	e2 f7       	brpl	.-8      	; 0x3126 <DIO_u8GetPinValue+0xd4>
    312e:	84 23       	and	r24, r20
    3130:	ec 81       	ldd	r30, Y+4	; 0x04
    3132:	fd 81       	ldd	r31, Y+5	; 0x05
    3134:	80 83       	st	Z, r24
    3136:	19 c0       	rjmp	.+50     	; 0x316a <DIO_u8GetPinValue+0x118>
        case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    3138:	e0 e3       	ldi	r30, 0x30	; 48
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	48 2f       	mov	r20, r24
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	02 2e       	mov	r0, r18
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <DIO_u8GetPinValue+0x100>
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	0a 94       	dec	r0
    3154:	e2 f7       	brpl	.-8      	; 0x314e <DIO_u8GetPinValue+0xfc>
    3156:	84 23       	and	r24, r20
    3158:	ec 81       	ldd	r30, Y+4	; 0x04
    315a:	fd 81       	ldd	r31, Y+5	; 0x05
    315c:	80 83       	st	Z, r24
    315e:	05 c0       	rjmp	.+10     	; 0x316a <DIO_u8GetPinValue+0x118>
        default: Local_u8ErrorState = 1; break;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	02 c0       	rjmp	.+4      	; 0x316a <DIO_u8GetPinValue+0x118>
        }
    }
    else
    {
        Local_u8ErrorState = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
}
    316c:	27 96       	adiw	r28, 0x07	; 7
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	60 97       	sbiw	r28, 0x10	; 16
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	69 87       	std	Y+9, r22	; 0x09
    3194:	7a 87       	std	Y+10, r23	; 0x0a
    3196:	8b 87       	std	Y+11, r24	; 0x0b
    3198:	9c 87       	std	Y+12, r25	; 0x0c
    319a:	2d 87       	std	Y+13, r18	; 0x0d
    319c:	3e 87       	std	Y+14, r19	; 0x0e
    319e:	4f 87       	std	Y+15, r20	; 0x0f
    31a0:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	a0 e0       	ldi	r26, 0x00	; 0
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	8d 83       	std	Y+5, r24	; 0x05
    31ac:	9e 83       	std	Y+6, r25	; 0x06
    31ae:	af 83       	std	Y+7, r26	; 0x07
    31b0:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    31b2:	19 82       	std	Y+1, r1	; 0x01
    31b4:	1a 82       	std	Y+2, r1	; 0x02
    31b6:	1b 82       	std	Y+3, r1	; 0x03
    31b8:	1c 82       	std	Y+4, r1	; 0x04
    31ba:	1d c0       	rjmp	.+58     	; 0x31f6 <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	af 81       	ldd	r26, Y+7	; 0x07
    31c2:	b8 85       	ldd	r27, Y+8	; 0x08
    31c4:	29 85       	ldd	r18, Y+9	; 0x09
    31c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    31c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    31ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__mulsi3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	af 83       	std	Y+7, r26	; 0x07
    31de:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	ab 81       	ldd	r26, Y+3	; 0x03
    31e6:	bc 81       	ldd	r27, Y+4	; 0x04
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	a1 1d       	adc	r26, r1
    31ec:	b1 1d       	adc	r27, r1
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	ab 83       	std	Y+3, r26	; 0x03
    31f4:	bc 83       	std	Y+4, r27	; 0x04
    31f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    31fc:	58 89       	ldd	r21, Y+16	; 0x10
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	ab 81       	ldd	r26, Y+3	; 0x03
    3204:	bc 81       	ldd	r27, Y+4	; 0x04
    3206:	82 17       	cp	r24, r18
    3208:	93 07       	cpc	r25, r19
    320a:	a4 07       	cpc	r26, r20
    320c:	b5 07       	cpc	r27, r21
    320e:	b0 f2       	brcs	.-84     	; 0x31bc <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	af 81       	ldd	r26, Y+7	; 0x07
    3216:	b8 85       	ldd	r27, Y+8	; 0x08
}
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	60 96       	adiw	r28, 0x10	; 16
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
    322e:	af 92       	push	r10
    3230:	bf 92       	push	r11
    3232:	cf 92       	push	r12
    3234:	df 92       	push	r13
    3236:	ef 92       	push	r14
    3238:	ff 92       	push	r15
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	64 97       	sbiw	r28, 0x14	; 20
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	6d 83       	std	Y+5, r22	; 0x05
    3254:	7e 83       	std	Y+6, r23	; 0x06
    3256:	8f 83       	std	Y+7, r24	; 0x07
    3258:	98 87       	std	Y+8, r25	; 0x08
    325a:	29 87       	std	Y+9, r18	; 0x09
    325c:	3a 87       	std	Y+10, r19	; 0x0a
    325e:	4b 87       	std	Y+11, r20	; 0x0b
    3260:	5c 87       	std	Y+12, r21	; 0x0c
    3262:	ed 86       	std	Y+13, r14	; 0x0d
    3264:	fe 86       	std	Y+14, r15	; 0x0e
    3266:	0f 87       	std	Y+15, r16	; 0x0f
    3268:	18 8b       	std	Y+16, r17	; 0x10
    326a:	a9 8a       	std	Y+17, r10	; 0x11
    326c:	ba 8a       	std	Y+18, r11	; 0x12
    326e:	cb 8a       	std	Y+19, r12	; 0x13
    3270:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
    3272:	29 89       	ldd	r18, Y+17	; 0x11
    3274:	3a 89       	ldd	r19, Y+18	; 0x12
    3276:	4b 89       	ldd	r20, Y+19	; 0x13
    3278:	5c 89       	ldd	r21, Y+20	; 0x14
    327a:	8d 85       	ldd	r24, Y+13	; 0x0d
    327c:	9e 85       	ldd	r25, Y+14	; 0x0e
    327e:	af 85       	ldd	r26, Y+15	; 0x0f
    3280:	b8 89       	ldd	r27, Y+16	; 0x10
    3282:	79 01       	movw	r14, r18
    3284:	8a 01       	movw	r16, r20
    3286:	e8 1a       	sub	r14, r24
    3288:	f9 0a       	sbc	r15, r25
    328a:	0a 0b       	sbc	r16, r26
    328c:	1b 0b       	sbc	r17, r27
    328e:	29 a1       	ldd	r18, Y+33	; 0x21
    3290:	3a a1       	ldd	r19, Y+34	; 0x22
    3292:	4b a1       	ldd	r20, Y+35	; 0x23
    3294:	5c a1       	ldd	r21, Y+36	; 0x24
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	af 81       	ldd	r26, Y+7	; 0x07
    329c:	b8 85       	ldd	r27, Y+8	; 0x08
    329e:	28 1b       	sub	r18, r24
    32a0:	39 0b       	sbc	r19, r25
    32a2:	4a 0b       	sbc	r20, r26
    32a4:	5b 0b       	sbc	r21, r27
    32a6:	c8 01       	movw	r24, r16
    32a8:	b7 01       	movw	r22, r14
    32aa:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__mulsi3>
    32ae:	7b 01       	movw	r14, r22
    32b0:	8c 01       	movw	r16, r24
    32b2:	29 85       	ldd	r18, Y+9	; 0x09
    32b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    32b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    32b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	af 81       	ldd	r26, Y+7	; 0x07
    32c0:	b8 85       	ldd	r27, Y+8	; 0x08
    32c2:	28 1b       	sub	r18, r24
    32c4:	39 0b       	sbc	r19, r25
    32c6:	4a 0b       	sbc	r20, r26
    32c8:	5b 0b       	sbc	r21, r27
    32ca:	c8 01       	movw	r24, r16
    32cc:	b7 01       	movw	r22, r14
    32ce:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__divmodsi4>
    32d2:	da 01       	movw	r26, r20
    32d4:	c9 01       	movw	r24, r18
    32d6:	9c 01       	movw	r18, r24
    32d8:	ad 01       	movw	r20, r26
    32da:	8d 85       	ldd	r24, Y+13	; 0x0d
    32dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32de:	af 85       	ldd	r26, Y+15	; 0x0f
    32e0:	b8 89       	ldd	r27, Y+16	; 0x10
    32e2:	82 0f       	add	r24, r18
    32e4:	93 1f       	adc	r25, r19
    32e6:	a4 1f       	adc	r26, r20
    32e8:	b5 1f       	adc	r27, r21
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	9a 83       	std	Y+2, r25	; 0x02
    32ee:	ab 83       	std	Y+3, r26	; 0x03
    32f0:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	9a 81       	ldd	r25, Y+2	; 0x02
    32f6:	ab 81       	ldd	r26, Y+3	; 0x03
    32f8:	bc 81       	ldd	r27, Y+4	; 0x04
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	64 96       	adiw	r28, 0x14	; 20
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	bf 90       	pop	r11
    331c:	af 90       	pop	r10
    331e:	08 95       	ret

00003320 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_private.h"
#include "KPD_interface.h"

u8 KPD_u8GetPressedKey(void)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <KPD_u8GetPressedKey+0x6>
    3326:	00 d0       	rcall	.+0      	; 0x3328 <KPD_u8GetPressedKey+0x8>
    3328:	0f 92       	push	r0
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMN_NUM; Local_u8ColumnIdx++)
    3332:	1a 82       	std	Y+2, r1	; 0x02
    3334:	5e c0       	rjmp	.+188    	; 0x33f2 <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current column */
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	fc 01       	movw	r30, r24
    333e:	e4 59       	subi	r30, 0x94	; 148
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	90 81       	ld	r25, Z
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	69 2f       	mov	r22, r25
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    334e:	19 82       	std	Y+1, r1	; 0x01
    3350:	3d c0       	rjmp	.+122    	; 0x33cc <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	fc 01       	movw	r30, r24
    335a:	e8 59       	subi	r30, 0x98	; 152
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	90 81       	ld	r25, Z
    3360:	9e 01       	movw	r18, r28
    3362:	2c 5f       	subi	r18, 0xFC	; 252
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	69 2f       	mov	r22, r25
    336a:	a9 01       	movw	r20, r18
    336c:	0e 94 29 18 	call	0x3052	; 0x3052 <DIO_u8GetPinValue>

			/* Check if switch is pressed */
			if(DIO_u8PIN_LOW == Local_u8PinState)
    3370:	8c 81       	ldd	r24, Y+4	; 0x04
    3372:	88 23       	and	r24, r24
    3374:	41 f5       	brne	.+80     	; 0x33c6 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	48 2f       	mov	r20, r24
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	ca 01       	movw	r24, r20
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	82 0f       	add	r24, r18
    338e:	93 1f       	adc	r25, r19
    3390:	fc 01       	movw	r30, r24
    3392:	e0 59       	subi	r30, 0x90	; 144
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	8b 83       	std	Y+3, r24	; 0x03
    339a:	0f c0       	rjmp	.+30     	; 0x33ba <KPD_u8GetPressedKey+0x9a>

				/* Polling (busy waiting) until the key is released */
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	fc 01       	movw	r30, r24
    33a4:	e8 59       	subi	r30, 0x98	; 152
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	90 81       	ld	r25, Z
    33aa:	9e 01       	movw	r18, r28
    33ac:	2c 5f       	subi	r18, 0xFC	; 252
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	69 2f       	mov	r22, r25
    33b4:	a9 01       	movw	r20, r18
    33b6:	0e 94 29 18 	call	0x3052	; 0x3052 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/* Polling (busy waiting) until the key is released */
				while(DIO_u8PIN_LOW == Local_u8PinState)
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	88 23       	and	r24, r24
    33be:	71 f3       	breq	.-36     	; 0x339c <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}

				return Local_u8PressedKey;
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	1c c0       	rjmp	.+56     	; 0x33fe <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMN_NUM; Local_u8ColumnIdx++)
	{
		/* Activate current column */
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	84 30       	cpi	r24, 0x04	; 4
    33d0:	08 f4       	brcc	.+2      	; 0x33d4 <KPD_u8GetPressedKey+0xb4>
    33d2:	bf cf       	rjmp	.-130    	; 0x3352 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/* Deactivate the current column */
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	88 2f       	mov	r24, r24
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	fc 01       	movw	r30, r24
    33dc:	e4 59       	subi	r30, 0x94	; 148
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	90 81       	ld	r25, Z
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	69 2f       	mov	r22, r25
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMN_NUM; Local_u8ColumnIdx++)
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	8f 5f       	subi	r24, 0xFF	; 255
    33f0:	8a 83       	std	Y+2, r24	; 0x02
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	84 30       	cpi	r24, 0x04	; 4
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <KPD_u8GetPressedKey+0xda>
    33f8:	9e cf       	rjmp	.-196    	; 0x3336 <KPD_u8GetPressedKey+0x16>

		/* Deactivate the current column */
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command) {
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	2f 97       	sbiw	r28, 0x0f	; 15
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	61 e0       	ldi	r22, 0x01	; 1
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
	DIO_u8SetPORTValue(CLCD_DATA_PORT, Copy_u8Command);
    343a:	83 e0       	ldi	r24, 0x03	; 3
    343c:	6f 85       	ldd	r22, Y+15	; 0x0f
    343e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <DIO_u8SetPORTValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	62 e0       	ldi	r22, 0x02	; 2
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e4       	ldi	r27, 0x40	; 64
    3454:	8b 87       	std	Y+11, r24	; 0x0b
    3456:	9c 87       	std	Y+12, r25	; 0x0c
    3458:	ad 87       	std	Y+13, r26	; 0x0d
    345a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a e7       	ldi	r20, 0x7A	; 122
    346a:	53 e4       	ldi	r21, 0x43	; 67
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8f 83       	std	Y+7, r24	; 0x07
    3476:	98 87       	std	Y+8, r25	; 0x08
    3478:	a9 87       	std	Y+9, r26	; 0x09
    347a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	2c f4       	brge	.+10     	; 0x349e <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	3f c0       	rjmp	.+126    	; 0x351c <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	3f ef       	ldi	r19, 0xFF	; 255
    34aa:	4f e7       	ldi	r20, 0x7F	; 127
    34ac:	57 e4       	ldi	r21, 0x47	; 71
    34ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	4c f5       	brge	.+82     	; 0x3508 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <CLCD_voidSendCommand+0xee>
    34e0:	89 e1       	ldi	r24, 0x19	; 25
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c 83       	std	Y+4, r25	; 0x04
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <CLCD_voidSendCommand+0xdc>
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	69 f7       	brne	.-38     	; 0x34e0 <CLCD_voidSendCommand+0xd0>
    3506:	14 c0       	rjmp	.+40     	; 0x3530 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3508:	6f 81       	ldd	r22, Y+7	; 0x07
    350a:	78 85       	ldd	r23, Y+8	; 0x08
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <CLCD_voidSendCommand+0x118>
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	62 e0       	ldi	r22, 0x02	; 2
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
}
    353a:	2f 96       	adiw	r28, 0x0f	; 15
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	cf 91       	pop	r28
    3548:	df 91       	pop	r29
    354a:	08 95       	ret

0000354c <CLCD_voidSendData>:


void CLCD_voidSendData(u8 Copy_u8Data)
{
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	2f 97       	sbiw	r28, 0x0f	; 15
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>

	DIO_u8SetPORTValue(CLCD_DATA_PORT, Copy_u8Data);
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	6f 85       	ldd	r22, Y+15	; 0x0f
    357a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <DIO_u8SetPORTValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	62 e0       	ldi	r22, 0x02	; 2
    3582:	41 e0       	ldi	r20, 0x01	; 1
    3584:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	a0 e0       	ldi	r26, 0x00	; 0
    358e:	b0 e4       	ldi	r27, 0x40	; 64
    3590:	8b 87       	std	Y+11, r24	; 0x0b
    3592:	9c 87       	std	Y+12, r25	; 0x0c
    3594:	ad 87       	std	Y+13, r26	; 0x0d
    3596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4a e7       	ldi	r20, 0x7A	; 122
    35a6:	53 e4       	ldi	r21, 0x43	; 67
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8f 83       	std	Y+7, r24	; 0x07
    35b2:	98 87       	std	Y+8, r25	; 0x08
    35b4:	a9 87       	std	Y+9, r26	; 0x09
    35b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ba:	78 85       	ldd	r23, Y+8	; 0x08
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e8       	ldi	r20, 0x80	; 128
    35c6:	5f e3       	ldi	r21, 0x3F	; 63
    35c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35cc:	88 23       	and	r24, r24
    35ce:	2c f4       	brge	.+10     	; 0x35da <CLCD_voidSendData+0x8e>
		__ticks = 1;
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	3f c0       	rjmp	.+126    	; 0x3658 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	3f ef       	ldi	r19, 0xFF	; 255
    35e6:	4f e7       	ldi	r20, 0x7F	; 127
    35e8:	57 e4       	ldi	r21, 0x47	; 71
    35ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ee:	18 16       	cp	r1, r24
    35f0:	4c f5       	brge	.+82     	; 0x3644 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
    361a:	0f c0       	rjmp	.+30     	; 0x363a <CLCD_voidSendData+0xee>
    361c:	89 e1       	ldi	r24, 0x19	; 25
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9c 83       	std	Y+4, r25	; 0x04
    3622:	8b 83       	std	Y+3, r24	; 0x03
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <CLCD_voidSendData+0xdc>
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	69 f7       	brne	.-38     	; 0x361c <CLCD_voidSendData+0xd0>
    3642:	14 c0       	rjmp	.+40     	; 0x366c <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <CLCD_voidSendData+0x118>
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	62 e0       	ldi	r22, 0x02	; 2
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_u8SetPinValue>
}
    3676:	2f 96       	adiw	r28, 0x0f	; 15
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_pcString)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	00 d0       	rcall	.+0      	; 0x368e <CLCD_voidSendString+0x6>
    368e:	0f 92       	push	r0
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	9b 83       	std	Y+3, r25	; 0x03
    3696:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    3698:	19 82       	std	Y+1, r1	; 0x01
    369a:	0e c0       	rjmp	.+28     	; 0x36b8 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	fc 01       	movw	r30, r24
    36a8:	e2 0f       	add	r30, r18
    36aa:	f3 1f       	adc	r31, r19
    36ac:	80 81       	ld	r24, Z
    36ae:	0e 94 a6 1a 	call	0x354c	; 0x354c <CLCD_voidSendData>
		Local_u8Counter++;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != '\0')
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	fc 01       	movw	r30, r24
    36c4:	e2 0f       	add	r30, r18
    36c6:	f3 1f       	adc	r31, r19
    36c8:	80 81       	ld	r24, Z
    36ca:	88 23       	and	r24, r24
    36cc:	39 f7       	brne	.-50     	; 0x369c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <CLCD_voidInit>:


void CLCD_voidInit(void) {
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	2e 97       	sbiw	r28, 0x0e	; 14
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 e2       	ldi	r26, 0x20	; 32
    36f4:	b2 e4       	ldi	r27, 0x42	; 66
    36f6:	8b 87       	std	Y+11, r24	; 0x0b
    36f8:	9c 87       	std	Y+12, r25	; 0x0c
    36fa:	ad 87       	std	Y+13, r26	; 0x0d
    36fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3700:	7c 85       	ldd	r23, Y+12	; 0x0c
    3702:	8d 85       	ldd	r24, Y+13	; 0x0d
    3704:	9e 85       	ldd	r25, Y+14	; 0x0e
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	4a e7       	ldi	r20, 0x7A	; 122
    370c:	53 e4       	ldi	r21, 0x43	; 67
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	8f 83       	std	Y+7, r24	; 0x07
    3718:	98 87       	std	Y+8, r25	; 0x08
    371a:	a9 87       	std	Y+9, r26	; 0x09
    371c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371e:	6f 81       	ldd	r22, Y+7	; 0x07
    3720:	78 85       	ldd	r23, Y+8	; 0x08
    3722:	89 85       	ldd	r24, Y+9	; 0x09
    3724:	9a 85       	ldd	r25, Y+10	; 0x0a
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e8       	ldi	r20, 0x80	; 128
    372c:	5f e3       	ldi	r21, 0x3F	; 63
    372e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3732:	88 23       	and	r24, r24
    3734:	2c f4       	brge	.+10     	; 0x3740 <CLCD_voidInit+0x66>
		__ticks = 1;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9e 83       	std	Y+6, r25	; 0x06
    373c:	8d 83       	std	Y+5, r24	; 0x05
    373e:	3f c0       	rjmp	.+126    	; 0x37be <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3740:	6f 81       	ldd	r22, Y+7	; 0x07
    3742:	78 85       	ldd	r23, Y+8	; 0x08
    3744:	89 85       	ldd	r24, Y+9	; 0x09
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	3f ef       	ldi	r19, 0xFF	; 255
    374c:	4f e7       	ldi	r20, 0x7F	; 127
    374e:	57 e4       	ldi	r21, 0x47	; 71
    3750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3754:	18 16       	cp	r1, r24
    3756:	4c f5       	brge	.+82     	; 0x37aa <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3758:	6b 85       	ldd	r22, Y+11	; 0x0b
    375a:	7c 85       	ldd	r23, Y+12	; 0x0c
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9e 83       	std	Y+6, r25	; 0x06
    377e:	8d 83       	std	Y+5, r24	; 0x05
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <CLCD_voidInit+0xc6>
    3782:	89 e1       	ldi	r24, 0x19	; 25
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	9c 83       	std	Y+4, r25	; 0x04
    3788:	8b 83       	std	Y+3, r24	; 0x03
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	9c 81       	ldd	r25, Y+4	; 0x04
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <CLCD_voidInit+0xb4>
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	9e 83       	std	Y+6, r25	; 0x06
    379e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
    37a2:	9e 81       	ldd	r25, Y+6	; 0x06
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	69 f7       	brne	.-38     	; 0x3782 <CLCD_voidInit+0xa8>
    37a8:	14 c0       	rjmp	.+40     	; 0x37d2 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	8d 81       	ldd	r24, Y+5	; 0x05
    37c0:	9e 81       	ldd	r25, Y+6	; 0x06
    37c2:	9a 83       	std	Y+2, r25	; 0x02
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <CLCD_voidInit+0xf0>
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);// should wait more than 30 ms
	/*function set*/
	CLCD_voidSendCommand(0b00111000);
    37d2:	88 e3       	ldi	r24, 0x38	; 56
    37d4:	0e 94 08 1a 	call	0x3410	; 0x3410 <CLCD_voidSendCommand>

	/*display on/off control*/
	CLCD_voidSendCommand(0b00001100);
    37d8:	8c e0       	ldi	r24, 0x0C	; 12
    37da:	0e 94 08 1a 	call	0x3410	; 0x3410 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(0b00000001);
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	0e 94 08 1a 	call	0x3410	; 0x3410 <CLCD_voidSendCommand>
}
    37e4:	2e 96       	adiw	r28, 0x0e	; 14
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <CLCD_voidGoToXY>:



void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos) {
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <CLCD_voidGoToXY+0x6>
    37fc:	0f 92       	push	r0
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	8a 83       	std	Y+2, r24	; 0x02
    3804:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if (Copy_u8XPos == 0)
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	88 23       	and	r24, r24
    380a:	19 f4       	brne	.+6      	; 0x3812 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	06 c0       	rjmp	.+12     	; 0x381e <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8XPos == 1)
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	19 f4       	brne	.+6      	; 0x381e <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	80 5c       	subi	r24, 0xC0	; 192
    381c:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address + 128);
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	80 58       	subi	r24, 0x80	; 128
    3822:	0e 94 08 1a 	call	0x3410	; 0x3410 <CLCD_voidSendCommand>

}
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	27 97       	sbiw	r28, 0x07	; 7
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	de bf       	out	0x3e, r29	; 62
    3842:	0f be       	out	0x3f, r0	; 63
    3844:	cd bf       	out	0x3d, r28	; 61
    3846:	9c 83       	std	Y+4, r25	; 0x04
    3848:	8b 83       	std	Y+3, r24	; 0x03
    384a:	6d 83       	std	Y+5, r22	; 0x05
    384c:	4e 83       	std	Y+6, r20	; 0x06
    384e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
    3850:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;

	/*calculate CGRAM address whose each block is 8 bytes*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	88 2f       	mov	r24, r24
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address Command To Lcd, With Setting Bit 6 Clearing Bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	80 5c       	subi	r24, 0xC0	; 192
    386a:	0e 94 08 1a 	call	0x3410	; 0x3410 <CLCD_voidSendCommand>

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    386e:	19 82       	std	Y+1, r1	; 0x01
    3870:	0e c0       	rjmp	.+28     	; 0x388e <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	28 2f       	mov	r18, r24
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	9c 81       	ldd	r25, Y+4	; 0x04
    387c:	fc 01       	movw	r30, r24
    387e:	e2 0f       	add	r30, r18
    3880:	f3 1f       	adc	r31, r19
    3882:	80 81       	ld	r24, Z
    3884:	0e 94 a6 1a 	call	0x354c	; 0x354c <CLCD_voidSendData>

	/*Send CGRAM Address Command To Lcd, With Setting Bit 6 Clearing Bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);

	/*write the pattern into CGRAM*/
	for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	8f 5f       	subi	r24, 0xFF	; 255
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	88 30       	cpi	r24, 0x08	; 8
    3892:	78 f3       	brcs	.-34     	; 0x3872 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go Back To DDRAM To Display The Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    3894:	8e 81       	ldd	r24, Y+6	; 0x06
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <CLCD_voidGoToXY>

	/*Display The Pattern Written In The CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	0e 94 a6 1a 	call	0x354c	; 0x354c <CLCD_voidSendData>
}
    38a2:	27 96       	adiw	r28, 0x07	; 7
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <main>:


int main(void) {
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62


    return 0;
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
}
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <__mulsi3>:
    38c6:	62 9f       	mul	r22, r18
    38c8:	d0 01       	movw	r26, r0
    38ca:	73 9f       	mul	r23, r19
    38cc:	f0 01       	movw	r30, r0
    38ce:	82 9f       	mul	r24, r18
    38d0:	e0 0d       	add	r30, r0
    38d2:	f1 1d       	adc	r31, r1
    38d4:	64 9f       	mul	r22, r20
    38d6:	e0 0d       	add	r30, r0
    38d8:	f1 1d       	adc	r31, r1
    38da:	92 9f       	mul	r25, r18
    38dc:	f0 0d       	add	r31, r0
    38de:	83 9f       	mul	r24, r19
    38e0:	f0 0d       	add	r31, r0
    38e2:	74 9f       	mul	r23, r20
    38e4:	f0 0d       	add	r31, r0
    38e6:	65 9f       	mul	r22, r21
    38e8:	f0 0d       	add	r31, r0
    38ea:	99 27       	eor	r25, r25
    38ec:	72 9f       	mul	r23, r18
    38ee:	b0 0d       	add	r27, r0
    38f0:	e1 1d       	adc	r30, r1
    38f2:	f9 1f       	adc	r31, r25
    38f4:	63 9f       	mul	r22, r19
    38f6:	b0 0d       	add	r27, r0
    38f8:	e1 1d       	adc	r30, r1
    38fa:	f9 1f       	adc	r31, r25
    38fc:	bd 01       	movw	r22, r26
    38fe:	cf 01       	movw	r24, r30
    3900:	11 24       	eor	r1, r1
    3902:	08 95       	ret

00003904 <__udivmodhi4>:
    3904:	aa 1b       	sub	r26, r26
    3906:	bb 1b       	sub	r27, r27
    3908:	51 e1       	ldi	r21, 0x11	; 17
    390a:	07 c0       	rjmp	.+14     	; 0x391a <__udivmodhi4_ep>

0000390c <__udivmodhi4_loop>:
    390c:	aa 1f       	adc	r26, r26
    390e:	bb 1f       	adc	r27, r27
    3910:	a6 17       	cp	r26, r22
    3912:	b7 07       	cpc	r27, r23
    3914:	10 f0       	brcs	.+4      	; 0x391a <__udivmodhi4_ep>
    3916:	a6 1b       	sub	r26, r22
    3918:	b7 0b       	sbc	r27, r23

0000391a <__udivmodhi4_ep>:
    391a:	88 1f       	adc	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	5a 95       	dec	r21
    3920:	a9 f7       	brne	.-22     	; 0x390c <__udivmodhi4_loop>
    3922:	80 95       	com	r24
    3924:	90 95       	com	r25
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	08 95       	ret

0000392c <__udivmodsi4>:
    392c:	a1 e2       	ldi	r26, 0x21	; 33
    392e:	1a 2e       	mov	r1, r26
    3930:	aa 1b       	sub	r26, r26
    3932:	bb 1b       	sub	r27, r27
    3934:	fd 01       	movw	r30, r26
    3936:	0d c0       	rjmp	.+26     	; 0x3952 <__udivmodsi4_ep>

00003938 <__udivmodsi4_loop>:
    3938:	aa 1f       	adc	r26, r26
    393a:	bb 1f       	adc	r27, r27
    393c:	ee 1f       	adc	r30, r30
    393e:	ff 1f       	adc	r31, r31
    3940:	a2 17       	cp	r26, r18
    3942:	b3 07       	cpc	r27, r19
    3944:	e4 07       	cpc	r30, r20
    3946:	f5 07       	cpc	r31, r21
    3948:	20 f0       	brcs	.+8      	; 0x3952 <__udivmodsi4_ep>
    394a:	a2 1b       	sub	r26, r18
    394c:	b3 0b       	sbc	r27, r19
    394e:	e4 0b       	sbc	r30, r20
    3950:	f5 0b       	sbc	r31, r21

00003952 <__udivmodsi4_ep>:
    3952:	66 1f       	adc	r22, r22
    3954:	77 1f       	adc	r23, r23
    3956:	88 1f       	adc	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	1a 94       	dec	r1
    395c:	69 f7       	brne	.-38     	; 0x3938 <__udivmodsi4_loop>
    395e:	60 95       	com	r22
    3960:	70 95       	com	r23
    3962:	80 95       	com	r24
    3964:	90 95       	com	r25
    3966:	9b 01       	movw	r18, r22
    3968:	ac 01       	movw	r20, r24
    396a:	bd 01       	movw	r22, r26
    396c:	cf 01       	movw	r24, r30
    396e:	08 95       	ret

00003970 <__divmodsi4>:
    3970:	97 fb       	bst	r25, 7
    3972:	09 2e       	mov	r0, r25
    3974:	05 26       	eor	r0, r21
    3976:	0e d0       	rcall	.+28     	; 0x3994 <__divmodsi4_neg1>
    3978:	57 fd       	sbrc	r21, 7
    397a:	04 d0       	rcall	.+8      	; 0x3984 <__divmodsi4_neg2>
    397c:	d7 df       	rcall	.-82     	; 0x392c <__udivmodsi4>
    397e:	0a d0       	rcall	.+20     	; 0x3994 <__divmodsi4_neg1>
    3980:	00 1c       	adc	r0, r0
    3982:	38 f4       	brcc	.+14     	; 0x3992 <__divmodsi4_exit>

00003984 <__divmodsi4_neg2>:
    3984:	50 95       	com	r21
    3986:	40 95       	com	r20
    3988:	30 95       	com	r19
    398a:	21 95       	neg	r18
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	4f 4f       	sbci	r20, 0xFF	; 255
    3990:	5f 4f       	sbci	r21, 0xFF	; 255

00003992 <__divmodsi4_exit>:
    3992:	08 95       	ret

00003994 <__divmodsi4_neg1>:
    3994:	f6 f7       	brtc	.-4      	; 0x3992 <__divmodsi4_exit>
    3996:	90 95       	com	r25
    3998:	80 95       	com	r24
    399a:	70 95       	com	r23
    399c:	61 95       	neg	r22
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	8f 4f       	sbci	r24, 0xFF	; 255
    39a2:	9f 4f       	sbci	r25, 0xFF	; 255
    39a4:	08 95       	ret

000039a6 <__prologue_saves__>:
    39a6:	2f 92       	push	r2
    39a8:	3f 92       	push	r3
    39aa:	4f 92       	push	r4
    39ac:	5f 92       	push	r5
    39ae:	6f 92       	push	r6
    39b0:	7f 92       	push	r7
    39b2:	8f 92       	push	r8
    39b4:	9f 92       	push	r9
    39b6:	af 92       	push	r10
    39b8:	bf 92       	push	r11
    39ba:	cf 92       	push	r12
    39bc:	df 92       	push	r13
    39be:	ef 92       	push	r14
    39c0:	ff 92       	push	r15
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	ca 1b       	sub	r28, r26
    39d0:	db 0b       	sbc	r29, r27
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	09 94       	ijmp

000039de <__epilogue_restores__>:
    39de:	2a 88       	ldd	r2, Y+18	; 0x12
    39e0:	39 88       	ldd	r3, Y+17	; 0x11
    39e2:	48 88       	ldd	r4, Y+16	; 0x10
    39e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    39e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f0:	b9 84       	ldd	r11, Y+9	; 0x09
    39f2:	c8 84       	ldd	r12, Y+8	; 0x08
    39f4:	df 80       	ldd	r13, Y+7	; 0x07
    39f6:	ee 80       	ldd	r14, Y+6	; 0x06
    39f8:	fd 80       	ldd	r15, Y+5	; 0x05
    39fa:	0c 81       	ldd	r16, Y+4	; 0x04
    39fc:	1b 81       	ldd	r17, Y+3	; 0x03
    39fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3a00:	b9 81       	ldd	r27, Y+1	; 0x01
    3a02:	ce 0f       	add	r28, r30
    3a04:	d1 1d       	adc	r29, r1
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	cd bf       	out	0x3d, r28	; 61
    3a10:	ed 01       	movw	r28, r26
    3a12:	08 95       	ret

00003a14 <_exit>:
    3a14:	f8 94       	cli

00003a16 <__stop_program>:
    3a16:	ff cf       	rjmp	.-2      	; 0x3a16 <__stop_program>
